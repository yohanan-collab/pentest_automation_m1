import re
from colorama import Fore
import nmap
from tabulate import tabulate
import vulners



def extract_version(version_string):
    # Utilisation d'une expression régulière pour extraire la version principale (par exemple, "7.6")
    version_match = re.search(r'(\d+\.\d+)', version_string)
    if version_match:
        return version_match.group(1)
    else:
        return ''

def Nmap(ip):
    nm = nmap.PortScanner()
    nm.scan(ip, '21-443')

    results = []

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                state = nm[host][proto][port]['state']
                if state == 'open':
                    service = nm[host][proto][port]['name']
                version = extract_version(nm[host][proto][port]['version']) if 'version' in nm[host][proto][port] else ''
                results.append([host, port, service, version])

    return results

def nouveau_scan():

    target = input(Fore.CYAN + "Entrez la cible : ")
    results = Nmap(target)

    if results:
        headers = ["ID", "Port", "Service", "Version"]
        formatted_results = [[i+1, result[1], result[2], result[3]] for i, result in enumerate(results)]
        print(tabulate(formatted_results, headers=headers, tablefmt="grid"))
        if not results:
            print(Fore.RED + "Aucun scan n'a été effectué.")
            return
        try:
            while True:
                print("\n")
                print(Fore.GREEN + "1. CVE associés")
                print(Fore.GREEN + "2. Retour au menu")
                choice = input(Fore.GREEN + "Entrez votre choix : ")
                choice = int(choice)
                if choice == 1 :
                    while True:
                        print("\n")
                        print(Fore.GREEN + ">>> Entrer l'ID du Service (1 par exemple) : ")
                        print(Fore.GREEN + ">>> Retour au menu (Appuyer sur entrer)")
                        choix = input(Fore.GREEN + "Entrez votre choix : ")
                        choix = int(choix) 
                        if 1 <= choix <= len(results):
                            port_info = results[choix - 1]
                            service, version = port_info[2], port_info[3]

                            # Create a Vulners API client
                            vulners_api = vulners.VulnersApi('CYJ25C4XL7OP1HOUEGCOJVAKAV988NKAHPX6V63H7HSLAJODJT5TT6FIQ7RHR0DD')

                            query = f"{service} {version}"
                            cve_results = vulners_api.find_all(query)

                            found_cves = False

                            # Loop through the CVE results and extract the CVE lists
                            cve_lists = []
                            for result in cve_results:
                                if "id" in result:
                                    cve_lists.append(tuple(result['cvelist']))

                            # Remove duplicates and empty tuples
                            cve_lists = list(set(cve_lists))
                            cve_lists = [list(line) for line in cve_lists if line]

                            # cve_lists = [tuple(Fore.RED + cve if isinstance(cve, str) else cve for cve in line) for line in cve_lists]

                            # Create a table from the list of dictionaries
                            if cve_lists:
                                table = tabulate(cve_lists, headers=[f'CVE associé à {query}'], tablefmt='grid')
                                print(table)
                            else:
                                print(f"No vulnerabilities found for '{query}'.")
                        elif choice == '':
                            Menu()
                        else:
                            print("Choix invalide.")
                elif choice == 2:
                    Menu()
        except ValueError:
            print("Choix invalide.")
    else:
        print("No open ports found.")
