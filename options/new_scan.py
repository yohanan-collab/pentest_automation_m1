import json
import re
import subprocess
from colorama import Fore
import nmap
from tabulate import tabulate
import vulners

def extract_version(version_string):
    # Utilisation d'une expression régulière pour extraire la version principale (par exemple, "7.6")
    version_match = re.search(r'(\d+\.\d+\.\d+)', version_string)
    if version_match:
        return version_match.group(1)
    else:
        return ''

def Nmap(ip, html_render=False):
    nm = nmap.PortScanner()
    nm.scan(ip, '21-8080')

    results = []
    if html_render:
        table_html = "<table class='w-full'>\n<thead>\n<tr>\n<th class='px-4 py-2'>Host</th>\n<th class='px-4 py-2'>Port</th>\n<th class='px-4 py-2'>Service</th>\n<th class='px-4 py-2'>Version</th>\n</tr>\n</thead>\n<tbody>"

        for host in nm.all_hosts(): 
            for proto in nm[host].all_protocols(): 
                ports = nm[host][proto].keys() 
                for port in ports: state = nm[host][proto][port]['state'] 
                if state == 'open': 
                    service = nm[host][proto][port]['name'] 
                    version = extract_version(nm[host][proto][port]['version']) if 'version' in nm[host][proto][port] else '' 
                    table_html += f"<tr class='border-b'><td class='border px-4 py-2'>{host}</td><td class='border px-4 py-2'>{port}</td><td class='border px-4 py-2'>{service}</td><td class='border px-4 py-2'>{version}</td></tr>\n"

        table_html += "</tbody>\n</table>" 
        return table_html

        
    else:
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                ports = nm[host][proto].keys()
                for port in ports:
                    state = nm[host][proto][port]['state']
                    if state == 'open':
                        service = nm[host][proto][port]['name']
                    version = extract_version(nm[host][proto][port]['version']) if 'version' in nm[host][proto][port] else ''
                    results.append([host, port, service, version])
        return results           

def NmapDiscover(target):
    # Initialize the scanner
    scanner = nmap.PortScanner()

    # Define the target
    # target = "192.168.111.137"

    # Perfqorm the scan
    nmap_output = scanner.scan(target, arguments='-sV --open')

    # Convert the output to JSON
    json_output = json.dumps(nmap_output, indent=4)

    # Parse the JSON output
    parsed_output = json.loads(json_output)

    # Extract the port, service name, and version information for each open port
    data = []
    for ip, ports in parsed_output['scan'].items():
        for port, port_data in ports['tcp'].items():
            if 'product' in port_data:
                data.append([port, port_data['name'], port_data['version']])
    return data


def CvePerPort(target):
    # Initialize the scanner
    scanner = nmap.PortScanner()

    # Define the target
    # target = "192.168.111.137"

    # Define the NSE script arguments
    args = {
        'mincvss': '7'
    }

    # Define the NSE script
    script = 'vulners'

    port_input = input(">>> Enter a port number\n>>>")
    # Perform the scan
    nmap_output = scanner.scan(target, arguments='-sV -p "{}" --script "{}" --script-args "{}"'.format(port_input,script, ', '.join('{}={}'.format(k, v) for k, v in args.items())))

    # Convert the output to JSON
    json_output = json.dumps(nmap_output, indent=4)

    # Parse the JSON output
    parsed_output = json.loads(json_output)

    # Extract the CVE matches
    cves = []
    for ip, ports in parsed_output['scan'].items():
        for port, port_data in ports['tcp'].items():
            if 'script' in port_data and 'vulners' in port_data['script']:
                cve_matches = re.findall(r'CVE-\d{4}-\d{4}', port_data['script']['vulners'])
                cves.extend(cve_matches)
                print(f"Port : {port} Service: {port_data['name']}, Version: {port_data['version']}")
                cve_matches = list(set(cve_matches))
                for cve in cve_matches:
                    print(f"CVE: {cve}")
    with open("cve.json", "w") as f:
        json.dump(list(set(cves)), f)

def CveAllPort(target):
    # Initialize the scanner
    scanner = nmap.PortScanner()

    # Define the target
    # target = "192.168.111.137"

    # Define the NSE script arguments
    args = {
        'mincvss': '7'
    }

    # Define the NSE script
    script = 'vulners'

    # Perform the scan
    nmap_output = scanner.scan(target, arguments='-sV --script "{}" --script-args "{}"'.format(script, ', '.join('{}={}'.format(k, v) for k, v in args.items())))

    json_output = json.dumps(nmap_output, indent=4)

    # Parse the JSON output
    parsed_output = json.loads(json_output)

    cves = []

    for ip, ports in parsed_output['scan'].items():
        for port, port_data in ports['tcp'].items():
            if 'script' in port_data and 'vulners' in port_data['script']:
                cve_matches = re.findall(r'CVE-\d{4}-\d{4}', port_data['script']['vulners'])
                cves.extend(cve_matches)
                print(f"Port : {port} Service: {port_data['name']}, Version: {port_data['version']}")
                cve_matches = list(set(cve_matches))
                for cve in cve_matches:
                    print(f"CVE: {cve}")
                    
    with open("cve.json", "w") as f:
        json.dump(list(set(cves)), f)


def ExploitCVE():
    # with open("cve.txt", "r") as f:
    #     cve_ids = [line.strip() for line in f.readlines()]
    with open("cve.json", "r") as f:
        cve_ids = json.load(f)

    for cve_id in cve_ids:
        result = subprocess.run(["exploitdb/searchsploit", "--cve", cve_id], capture_output=True, text=True)
        output_lines = result.stdout.split('\n')
        output_lines2 = result.stdout
        if output_lines[0] == 'Exploits: No Results':
            continue
        else:
            print(f"Exploits found for {cve_id}:")
            print(output_lines2)
            # for line in output_lines:
            #     if "|" in line:
            #         path = line.split("|")[1].strip()
            #         exploit_vulnerability(path)
