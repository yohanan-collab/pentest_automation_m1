import json
import re
import subprocess
from colorama import Fore
import nmap
import requests

def extract_version(version_string):
    # Utilisation d'une expression régulière pour extraire la version principale (par exemple, "7.6")
    version_match = re.search(r'(\d+\.\d+\.\d+)', version_string)
    if version_match:
        return version_match.group(1)
    else:
        return ''
        

def NmapDiscover(target,html_render=False):
    # Initialize the scanner
    scanner = nmap.PortScanner()

    # Define the target
    # target = "192.168.111.137"

    # Perfqorm the scan
    nmap_output = scanner.scan(target, arguments='-sV --open')

    # Convert the output to JSON
    json_output = json.dumps(nmap_output, indent=4)

    # Parse the JSON output
    parsed_output = json.loads(json_output)

    # Extract the port, service name, and version information for each open port
    data = []
    table_html = "<table class='w-full'>\n<thead>\n<tr>\n<th class='px-4 py-2'>Port</th>\n<th class='px-4 py-2'>Service</th>\n<th class='px-4 py-2'>Version</th>\n</tr>\n</thead>\n<tbody>"
    if html_render:
        for ip, ports in parsed_output['scan'].items():
            for port, port_data in ports['tcp'].items():
                if 'product' in port_data:
                    service = port_data['name']
                    version = port_data['version']
                    table_html += f"<tr class='border-b'><td class='border px-4 py-2'>{port}</td><td class='border px-4 py-2'>{service}</td><td class='border px-4 py-2'>{version}</td></tr>\n"

        table_html += "</tbody>\n</table>" 
        return table_html
        
    else:
        for ip, ports in parsed_output['scan'].items():
            for port, port_data in ports['tcp'].items():
                if 'product' in port_data:
                    data.append([port, port_data['name'], port_data['version']])
        return data


def CvePerPort(target):
    scanner = nmap.PortScanner()

    args = {
        'mincvss': '7'
    }

    script = 'vulners'

    port_input = input(">>> Enter a port number\n>>>")

    nmap_output = scanner.scan(target, arguments='-sV -p "{}" --script "{}" --script-args "{}"'.format(port_input,script, ', '.join('{}={}'.format(k, v) for k, v in args.items())))

    json_output = json.dumps(nmap_output, indent=4)

    parsed_output = json.loads(json_output)

    cves = []
    
    for ip, ports in parsed_output['scan'].items():
        for port, port_data in ports['tcp'].items():
            if 'script' in port_data and 'vulners' in port_data['script']:
                cve_matches = re.findall(r'CVE-\d{4}-\d{4}', port_data['script']['vulners'])
                cves.extend(cve_matches)
                print(f"\nPort : {port}\nService:{port_data['name']}\nVersion: {port_data['version']}")
                cve_matches = list(set(cves))
                print("CVEs:")
                for cve in cve_matches:
                    print(f"- {cve}")
                    
    with open("export/cve.json", "w") as f:
        json.dump(list(set(cves)), f)

def CveAllPort(target, html_render=False):
    scanner = nmap.PortScanner()

    args = {
        'mincvss': '7'
    }

    script = 'vulners'

    nmap_output = scanner.scan(target, arguments='-sV --script "{}" --script-args "{}"'.format(script, ', '.join('{}={}'.format(k, v) for k, v in args.items())))
    
    json_output = json.dumps(nmap_output, indent=4)

    parsed_output = json.loads(json_output)

    cves = []
    
    if html_render:
            
        html_table = '<table>\n<thead>\n<tr>\n<th>CVE ID</th>\n<th>Description</th>\n<th>Score</th>\n</tr>\n</thead>\n<tbody>\n'

        for ip, ports in parsed_output['scan'].items():
            for port, port_data in ports['tcp'].items():
                if 'script' in port_data and 'vulners' in port_data['script']:
                    cve_matches = re.findall(r'CVE-\d{4}-\d{4}', port_data['script']['vulners'])
                    cves.extend(cve_matches)
                    with open("export/cve.json", "w") as f:
                        json.dump(list(set(cves)), f)
                    cve_matches = list(set(cve_matches))
                    for cve_id in cve_matches:
                        try:
                            url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
                            response = requests.get(url)
                            response.raise_for_status()
                            data = response.json()
                            if data and "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
                                cve_details = data["vulnerabilities"][0]["cve"]
                                html_table += f'<tr>\n<td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name={cve_id}">{cve_id}</a></td>\n'
                                for desc in cve_details.get("descriptions", []):
                                    if desc["lang"] == "en":
                                        html_table += f'<td>{desc[("value")]}</td>\n'
                                cvss_pattern = re.compile(r'cvssMetricV3\d*')
                                for key in cve_details["metrics"].keys():
                                    if cvss_pattern.match(key):
                                        cvss_data = cve_details["metrics"][key][0]["cvssData"]
                                        if "baseScore" in cvss_data:
                                            html_table += f'<td>{cvss_data["baseScore"]}</td>\n'
                                            break
                                html_table += '</tr>\n'
                        except requests.exceptions.RequestException as e:
                            html_table += f'<tr>\n<td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name={cve_id}">{cve_id}</a></td>\n<td>Failed to fetch CVE details</td>\n<td></td>\n</tr>\n'

        html_table += '</tbody>\n</table>\n'
        return html_table
    else:
        for ip, ports in parsed_output['scan'].items():
            for port, port_data in ports['tcp'].items():
                if 'script' in port_data and 'vulners' in port_data['script']:
                    cve_matches = re.findall(r'CVE-\d{4}-\d{4}', port_data['script']['vulners'])
                    cves.extend(cve_matches)
                    print(f"\nPort : {port}\nService:{port_data['name']}\nVersion: {port_data['version']}")
                    cve_matches = list(set(cves))
                    print("CVEs:")
                    for cve in cve_matches:
                        print(f"- {cve}")
                    
    with open("export/cve.json", "w") as f:
        json.dump(list(set(cves)), f)


def SearchExploit(html_render=False):
    with open("export/cve.json", "r") as f:
        cve_ids = json.load(f)

    HTML = ''
    if html_render:
        for cve_id in cve_ids:
            print(f"Searching for CVE-{cve_id}...")
            result = subprocess.run(["exploitdb/searchsploit", "--cve", cve_id], capture_output=True, text=True)
            output_lines = result.stdout.split('\n')
            print(output_lines)
            if output_lines[0] == 'Exploits: No Results':
                print(f"No exploits found for {cve_id}")
                continue
            else:
                output_lines = output_lines[1:-1]
                HTML += f"<h3>Exploits found for CVE-{cve_id}:</h3>"
                HTML += "<table border='1'>"
                header_found = False
                for line in output_lines:
                    if line.startswith(' Exploit Title'):
                        title, path = line.split(' | ', 1)
                        HTML += f"<tr><th>{title}</th><th>{path}</th></tr>"
                        header_found = True
                    elif '------------------------------------------------------------------------' in line:
                        continue  # skip separator lines
                    elif 'Shellcodes: No Results' in line:
                        continue  # skip empty results
                    elif not line.strip():  # skip empty lines
                        continue
                    else:
                        if not header_found:
                            raise ValueError("Header not found in output_lines")
                        title, path = line.rsplit(' | ', 1)  # split title and path
                        HTML += f"<tr><td>{title}</td><td>{path}</td></tr>"
                HTML += "</table>"
        return HTML
                
    else:
        for cve_id in cve_ids:
            result = subprocess.run(["exploitdb/searchsploit", "--cve", cve_id], capture_output=True, text=True)
            output_lines = result.stdout.split('\n')
            output_lines2 = result.stdout
            if output_lines[0] == 'Exploits: No Results':
                continue
            else:
                print(f"Exploits found for {cve_id}:")
                print(output_lines2)

