import datetime
import os
import subprocess
import dash
from dash import Dash, dcc, html, dash_table, Input, Output, State, callback_context,ALL
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from dash_iconify import DashIconify
import plotly.graph_objects as go
import pandas as pd
import xmltodict
import json



app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB, dbc.icons.FONT_AWESOME], suppress_callback_exceptions=True,title="Pentest automation")


server = app.server

df_vulnerabilities = pd.DataFrame({
    'Vulnérabilité': ['Haute', 'Moyenne', 'Critique', 'Faible'],
    'Nombre': [10, 15, 5, 20]
})

df_authentication_tests = pd.DataFrame({
    'Test ID': [1, 2, 3, 4],
    'Résultat': ['Réussi', 'Échoué', 'Réussi', 'Échoué']
})


# fig_ports_services = go.Figure(data=[go.Bar(x=df_ports_services['Port'], y=df_ports_services['Service'], text=df_ports_services['State'])])
# fig_ports_services.update_layout(title="Ports et Services", xaxis_title="Port", yaxis_title="Service")


fig_vulnerabilities = go.Figure(data=[go.Pie(labels=df_vulnerabilities['Vulnérabilité'], values=df_vulnerabilities['Nombre'])])
fig_vulnerabilities.update_layout(title="Vulnérabilités")

def get_icon(icon):
    return DashIconify(icon=icon, height=16)


app.layout = dmc.MantineProvider(
    withGlobalStyles=True, 
    children=[
        dmc.Header(
            height=70,
            fixed=True,
            style={
                "zIndex": "1",
                "backgroundColor": "rgb(34, 139, 230)",
                "width": "100%",
            },
            children=[
                dmc.Container(
                    fluid=True,
                    children=[
                        dmc.Group(
                            position="apart",
                            children=[
                                dmc.Anchor(
                                    "ScanBot",
                                    href="/",
                                    style={
                                        "color": "white",
                                        "fontFamily": "'Arial', sans-serif",
                                        "fontSize": "30px",
                                        "padding": "10px",
                                    }
                                ),
                                
                                dmc.MantineProvider(
                                    inherit=True,
                                    theme={
                                        "components": {
                                            "Badge": {
                                                "styles": {
                                                    "root": {"borderWidth": 1, "height": 30, "padding": 10, "color": "white"},
                                                    "inner": {"fontWeight": 500},
                                                }
                                            }
                                        }
                                    },
                                    children=[dmc.Badge(f"Cible actuelle : ", variant="dot",color='green')],
                                )
                                
                            ]
                        )
                    ]
                )
            ]
        ),
        dmc.Container(
            fluid=True,
            children=[
                html.Div(id='content')
            ],
            style={"marginLeft": "300px" ,"marginTop":"80px"}
        ),

        dcc.Location(id='url'),
    ]
)


@app.callback(
    Output('content', 'children'),
    [Input('url', 'pathname')],
    
)
def display_page(pathname):
    if pathname == '/':
        return dashboard_layout()
    else:
        return "Page not found"

def generate_scan_options():
    return html.Div([
        dmc.Checkbox(id="nmap-check", label="Nmap", value=False),
        dmc.Checkbox(id="nikto-check", label="Nikto", value=False),
        dmc.Button("Lancer le scan", id="scan-button"),
        dmc.Text(id="result-label")
    ])

def last_target_from_json():
    json_file_path = "pentest_results.json"
    if os.path.exists(json_file_path):
        with open(json_file_path, 'r') as file:
            data = json.load(file)
        if data["Target"]:
            return data["Target"][-1]["Hostname"]
    return None

@app.callback(
    [Output('initial-content', 'children'),
     Output('new-scan-content', 'children'),
     Output('scan-results', 'children')],
    [Input('start-scan-btn', 'n_clicks')],
    [State('target-input', 'value')],
    prevent_initial_call=True
)
def update_content(n_clicks, hostname):
    if n_clicks > 0 and hostname:
        json_file_path = "pentest_results.json"
        if os.path.exists(json_file_path):
            with open(json_file_path, 'r') as file:
                data = json.load(file)
        else:
            data = {"Target": []}
        
        scan_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data["Target"].append({"Hostname": hostname, "Last Scan Time": scan_time})
        with open(json_file_path, 'w') as file:
            json.dump(data, file, indent=4)
        
        confirmation_message = f"Hostname {hostname} ajouté avec succès au fichier JSON."
        return None, generate_scan_options(), confirmation_message
    
    return dash.no_update, dash.no_update, dash.no_update

@app.callback(
    Output('result-label', 'children'),
    [Input('scan-button', 'n_clicks')],
    [State('nmap-check', 'checked'), State('nikto-check', 'checked')],
    # [State('nmap-value', 'value'), State('nikto-value', 'value')],
    prevent_initial_call=True
)

def convert_xml_json():
    xml_file_path = 'nmap_out.xml'
    json_file_path = 'output.json'
    with open(xml_file_path, 'r', encoding='utf-8') as xml_file:
        xml_content = xml_file.read()

    dict_data = xmltodict.parse(xml_content)

    with open(json_file_path, 'w', encoding='utf-8') as json_file:
        json.dump(dict_data, json_file, ensure_ascii=False, indent=4)

def dashboard_layout():
    return html.Div([
        dbc.Container([
            html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Statistiques", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
            dmc.Group(
                [
                    # dmc.RingProgress(
                    #     id="ring-progress-1",
                    #     size=200,
                    #     sections=[{"value": 10, "color": "indigo"}],
                    #     label=dmc.Center(dmc.Text(f"{nombre_ports_ouverts} ports ouverts", color="indigo")),
                    # ),

                    dmc.RingProgress(
                        id="ring-progress-3",
                        size=200,
                        sections=[{"value": 20, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("10 vulnérabilités critiques", color="indigo",align='center')),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-4",
                        size=200,
                        sections=[{"value": 50, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("2 tests réussis", color="indigo",align='center')),
                    ),
                ],
                position ="center",  
            ),
            html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Visualisation", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
        ]),
        dbc.Container([
            dbc.Row([
                # dbc.Col([
                #     html.Div([
                #         dcc.Graph(figure=fig_ports_services)
                #     ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}), 
                # ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_vulnerabilities)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px","marginTop":"95px"}),
        ], fluid=True, className="ms-1")
    ])

def generate_table(dataframe):
    header = html.Thead(
        html.Tr([html.Th(col) for col in dataframe.columns])
    )

    rows = []
    for i, row in dataframe.iterrows():
        bgcolor = 'rgb(248, 248, 248)' if i % 2 == 1 else 'white'
        cells = [html.Td(data) for data in row]
        rows.append(html.Tr(cells, style={'backgroundColor': bgcolor}))

    table_body = html.Tbody(rows)

    table = dmc.Table(
        verticalSpacing="sm",
        horizontalSpacing=10,
        children=[header, table_body],
        style={'overflowX': 'auto', 'textAlign': 'left', 'width': '100%'}
    )

    # Style pour le div contenant le tableau pour permettre le défilement vertical
    table_container_style = {
        'maxHeight': '400px',  # Définir une hauteur maximale pour le conteneur
        'overflowY': 'auto'    # Permettre le défilement vertical
    }

    box_style = {
        'border': '1px solid lightgrey',
        'boxShadow': '0 2px 4px rgba(0,0,0,.1)',
        'borderRadius': '5px',
        'padding': '10px',
        'marginTop': '20px',
        'marginBottom': '20px'
    }

    # Envelopper le tableau dans un div avec un style pour le défilement vertical
    return html.Div(
        html.Div(table, style=table_container_style),  # Div pour le défilement
        style=box_style
    )



def ports_services_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Ports and Services", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                # dbc.Col(
                #         dbc.Tab(label="Ports and Services", 
                #         children=[html.Div(generate_table(df_ports_services),className="mb-2")
                #         ]),
                #             width=12,
                #             lg=9,     
                # ),

            ],justify='center')
      
            
def vulnerabilities_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Vulnérabilités Détectées", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Vulnérabilités Détectées", 
                        children=[html.Div(generate_table(df_vulnerabilities),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center')


def authentication_tests_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Tests d'Authentification", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Tests d'Authentification", 
                        children=[html.Div(generate_table(df_authentication_tests),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center')


if __name__ == '__main__':
    app.run_server(debug=True)