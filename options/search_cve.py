import re
from colorama import Fore
import requests

def search_cve():
    cve_id = input(Fore.CYAN + "Entrez l'ID CVE : ")
    if not cve_id:
        print(Fore.RED + "Veuillez entrer un ID CVE.")
        return

    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data and "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
            cve_details = data["vulnerabilities"][0]["cve"]

            print(Fore.GREEN + "\n=============")
            print("CVE Details:")
            print("=============")
            print(Fore.YELLOW + f"ID: {cve_details['id']}")
            if 'sourceIdentifier' in cve_details:
                print(Fore.BLUE + f"Source: {cve_details['sourceIdentifier']}")
            if 'published' in cve_details:
                print(Fore.MAGENTA + f"Published: {cve_details['published']}")
            if 'lastModified' in cve_details:
                print(Fore.CYAN + f"Last Modified: {cve_details['lastModified']}")
            if 'vulnStatus' in cve_details:
                print(Fore.RED + f"Status: {cve_details['vulnStatus']}")

            print(Fore.WHITE + "\n============")
            print("Descriptions:")
            print("============")
            for desc in cve_details.get("descriptions", []):
                if desc["lang"] == "en":
                    print(Fore.WHITE + f"{desc['value']}")

            cvss_pattern = re.compile(r'cvssMetricV\d*')

            for key in cve_details["metrics"].keys():
                if cvss_pattern.match(key):
                    cvss_data = cve_details["metrics"][key][0]["cvssData"]
                    if "baseScore" in cvss_data:
                        print("\n==========")
                        print("CVSS Score:")
                        print("==========")
                        if 'baseScore' in cvss_data:
                            print(f"Score: {cvss_data['baseScore']}")
                        if 'accessVector' in cvss_data:
                            print(f"Access Vector: {cvss_data['accessVector']}")
                        if 'accessComplexity' in cvss_data:
                            print(f"Access Complexity: {cvss_data['accessComplexity']}")
                        if 'authentication' in cvss_data:
                            print(f"Authentication: {cvss_data['authentication']}")
                        if 'confidentialityImpact' in cvss_data:
                            print(f"Confidentiality Impact: {cvss_data['confidentialityImpact']}")
                        if 'integrityImpact' in cvss_data:
                            print(f"Integrity Impact: {cvss_data['integrityImpact']}")
                        if 'availabilityImpact' in cvss_data:
                            print(f"Availability Impact: {cvss_data['availabilityImpact']}")

                        break
            
            print("\n==========")
            print("Weaknesses:")
            print("==========")
            for weakness in cve_details.get("weaknesses", []):
                if 'description' in weakness:
                    print(Fore.WHITE + f"{weakness['description']}")
                if 'cvssScore' in weakness:
                    print(Fore.YELLOW + f"CVSS Score: {weakness['cvssScore']}")
            
            print("\n=============")
            print("Configurations:")
            print("=============")
            for config in cve_details.get("configurations", []):
                if 'nodes' in config and len(config['nodes']) > 0 and 'cpeMatch' in config['nodes'][0] and len(config['nodes'][0]['cpeMatch']) > 0 and 'criteria' in config['nodes'][0]['cpeMatch'][0]:
                    print(Fore.WHITE + f"Product: {config['nodes'][0]['cpeMatch'][0]['criteria']}")
                    if 'versionEndIncluding' in config['nodes'][0]['cpeMatch'][0]:
                        print(Fore.WHITE + f"Affected Version: before {config['nodes'][0]['cpeMatch'][0]['versionEndIncluding']}")
            print("\n==========")
            print("References:")
            print("==========")
            for ref in cve_details.get("references", []):
                if 'url' in ref:
                    print(Fore.WHITE + f"{ref['url']}")

        else:
            print(Fore.RED + f"CVE{cve_id} not found.")
    except requests.exceptions.HTTPError as errh:
        print(Fore.RED + f"HTTP Error: {errh}")
    except requests.exceptions.ConnectionError as errc:
        print(Fore.RED + f"Connection Error: {errc}")
    except requests.exceptions.Timeout as errt:
        print(Fore.RED + f"Timeout Error: {errt}")
    except requests.exceptions.RequestException as err:
        print(Fore.RED + f"Request Exception: {err}")

