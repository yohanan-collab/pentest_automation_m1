import re
from colorama import Fore, Style
import requests
from tabulate import tabulate
import vulners
from options.new_scan import Nmap

def bordered_print(text, style="normal"):
    if text.strip():
        if style == "menu":
            border_char = "-"
            border_side = "*"
        elif style == "start_line":
            border_char = "."
            border_side = ":"
        elif style == "subtitle":
            border_char = "+"
            border_side = "="
        else:
            border_char = "="
            border_side = "|"

        text_length = len(text)
        border = border_char * (text_length + 4)
        print(border)
        print(f"{border_side:<}{text:^{text_length + 2}}{border_side:>}")
        print(border)


def search_cve():
    
    cve_id = input(Fore.CYAN + "Entrez l'ID CVE : ")
    if not cve_id:
        print(Fore.RED + "Veuillez entrer un ID CVE.")
        return

    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data and "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
            cve_details = data["vulnerabilities"][0]["cve"]

            bordered_print(f"Détails de la CVE {cve_id} :", style="title")
            print(f"ID : {cve_details['id']}")
            print(f"Source : {cve_details['sourceIdentifier']}")
            print(f"Publié le : {cve_details['published']}")
            print(f"Dernière modification : {cve_details['lastModified']}")
            print(f"Statut : {cve_details['vulnStatus']}")

            bordered_print("\nDescriptions :", style="subtitle")
            for desc in cve_details.get("descriptions", []):
                if desc["lang"] == "en":
                    print(f"{desc['value']}")

            cvss_pattern = re.compile(r'cvssMetricV\d*')

            for key in cve_details["metrics"].keys():
                if cvss_pattern.match(key):
                    cvss_data = cve_details["metrics"][key][0]["cvssData"]
                    if "baseScore" in cvss_data:
                        bordered_print("\nScore CVSS :", style="subtitle")
                        print(f"Score CVSS : {cvss_data['baseScore'] if 'baseScore' in cvss_data else 'N/A'}")
                        print(f"Vecteur d'attaque : {cvss_data['accessVector'] if 'accessVector' in cvss_data else 'N/A'}")
                        print(f"Complexité d'accès : {cvss_data['accessComplexity'] if 'accessComplexity' in cvss_data else 'N/A'}")
                        print(f"Authentification : {cvss_data['authentication'] if 'authentication' in cvss_data else 'N/A'}")
                        print(f"Impact sur la confidentialité : {cvss_data['confidentialityImpact'] if 'confidentialityImpact' in cvss_data else 'N/A'}")
                        print(f"Impact sur l'intégrité : {cvss_data['integrityImpact'] if 'integrityImpact' in cvss_data else 'N/A'}")
                        print(f"Impact sur la disponibilité : {cvss_data['availabilityImpact'] if 'availabilityImpact' in cvss_data else 'N/A'}")

                        break

            bordered_print("\nFaiblesses :", style="subtitle")
            for weakness in cve_details.get("weaknesses", []):
                print(f"{weakness['description'][0]['value']}")

            bordered_print("\nConfigurations :", style="subtitle")
            for config in cve_details.get("configurations", []):
                print(f"Produit : {config['nodes'][0]['cpeMatch'][0]['criteria']}")
                print(f"Version affectée : avant {config['nodes'][0]['cpeMatch'][0]['versionEndIncluding']}")

            bordered_print("\nRéférences :", style="subtitle")
            for ref in cve_details.get("references", []):
                print(f"{ref['url']}")

        else:
            print(Fore.RED + "Aucune CVE trouvée pour cet ID.")
    except requests.RequestException as e:
        print(f"Erreur lors de la récupération des détails de la CVE : {e}")
        
def searchsploit(domain):
    results = Nmap(domain)
    HTML = ""  # Initialisation de la chaîne HTML

    if results:
        for result in results:
            service, version = result[2], result[3]

            # Create a Vulners API client
            vulners_api = vulners.VulnersApi('NZ0LOQ8XWE7SCJSPP1SZH1QPOVIVMAIN9O7JAMWPIPXBO3T7HMVJCHJMSRBOE6SM')

            query = f"{service} {version}"
            cve_results = vulners_api.find_all(query)

            found_cves = False

            # Loop through the CVE results and extract the CVE lists
            cve_lists = []
            for result in cve_results:
                if "id" in result:
                    cve_lists.append(tuple(result['cvelist']))

            # Remove duplicates and empty tuples
            cve_lists = list(set(cve_lists))
            cve_lists = [list(line) for line in cve_lists if line]

            # Intégration HTML
            HTML += f"<h2>CVE associated with {query}</h2>"
            HTML += f"<h2>Service: {service}, Version: {version}</h2>"
            if cve_lists:
                # Convertir chaque sous-liste en chaîne de caractères
                cve_lists = [", ".join(map(str, line)) for line in cve_lists]
                # Convertir la liste externe en chaîne de caractères
                HTML += "<ul><li>" + "</li><li>".join(cve_lists) + "</li></ul>"

    return HTML


        