import re
from colorama import Fore
import requests

def search_cve():
    
    cve_id = input(Fore.CYAN + "Entrez l'ID CVE : ")
    if not cve_id:
        print(Fore.RED + "Veuillez entrer un ID CVE.")
        return

    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data and "vulnerabilities" in data and len(data["vulnerabilities"]) > 0:
            cve_details = data["vulnerabilities"][0]["cve"]

            if 'id' in cve_details:
                print(Fore.GREEN + f"Détails de la CVE {cve_id} :")
                print(Fore.YELLOW + f"ID : {cve_details['id']}")
            if 'sourceIdentifier' in cve_details:
                print(Fore.BLUE + f"Source : {cve_details['sourceIdentifier']}")
            if 'published' in cve_details:
                print(Fore.MAGENTA + f"Publié le : {cve_details['published']}")
            if 'lastModified' in cve_details:
                print(Fore.CYAN + f"Dernière modification : {cve_details['lastModified']}")
            if 'vulnStatus' in cve_details:
                print(Fore.RED + f"Statut : {cve_details['vulnStatus']}")

            print("\nDescriptions :")
            for desc in cve_details.get("descriptions", []):
                if desc["lang"] == "en":
                    print(Fore.WHITE + f"{desc['value']}")

            cvss_pattern = re.compile(r'cvssMetricV\d*')

            for key in cve_details["metrics"].keys():
                if cvss_pattern.match(key):
                    cvss_data = cve_details["metrics"][key][0]["cvssData"]
                    if "baseScore" in cvss_data:
                        print("\nScore CVSS :")
                        if 'baseScore' in cvss_data:
                            print(Fore.RED + f"Score CVSS : {cvss_data['baseScore']}")
                        if 'accessVector' in cvss_data:
                            print(Fore.BLUE + f"Vecteur d'attaque : {cvss_data['accessVector']}")
                        if 'accessComplexity' in cvss_data:
                            print(Fore.GREEN + f"Complexité d'accès : {cvss_data['accessComplexity']}")
                        if 'authentication' in cvss_data:
                            print(Fore.YELLOW + f"Authentification : {cvss_data['authentication']}")
                        if 'confidentialityImpact' in cvss_data:
                            print(Fore.MAGENTA + f"Impact sur la confidentialité : {cvss_data['confidentialityImpact']}")
                        if 'integrityImpact' in cvss_data:
                            print(Fore.CYAN + f"Impact sur l'intégrité : {cvss_data['integrityImpact']}")
                        if 'availabilityImpact' in cvss_data:
                            print(Fore.WHITE + f"Impact sur la disponibilité : {cvss_data['availabilityImpact']}")

                        break

            print("\nFaiblesses :")
            for weakness in cve_details.get("weaknesses", []):
                if 'description' in weakness and len(weakness['description']) > 0 and 'value' in weakness['description'][0]:
                    print(Fore.WHITE + f"{weakness['description'][0]['value']}")

            print("\nConfigurations :")
            for config in cve_details.get("configurations", []):
                if 'nodes' in config and len(config['nodes']) > 0 and 'cpeMatch' in config['nodes'][0] and len(config['nodes'][0]['cpeMatch']) > 0 and 'criteria' in config['nodes'][0]['cpeMatch'][0]:
                    print(Fore.WHITE + f"Produit : {config['nodes'][0]['cpeMatch'][0]['criteria']}")
                    if 'versionEndIncluding' in config['nodes'][0]['cpeMatch'][0]:
                        print(Fore.WHITE + f"Version affectée : avant {config['nodes'][0]['cpeMatch'][0]['versionEndIncluding']}")

            print("\nRéférences :")
            for ref in cve_details.get("references", []):
                if 'url' in ref:
                    print(Fore.WHITE + f"{ref['url']}")

        else:
            print(Fore.RED + "Aucune CVE trouvée pour cet ID.")
    except requests.RequestException as e:
        print(Fore.RED + f"Erreur lors de la récupération des détails de la CVE : {e}")