import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
import re
from pykeepass import PyKeePass
import os
from colorama import Fore, Back, Style
#pip install pykeepass

DIGIT_REGEX = re.compile(r"\d")
UPPERCASE_REGEX = re.compile(r"[A-Z]")
LOWERCASE_REGEX = re.compile(r"[a-z]")
SPECIAL_CHAR_REGEX = re.compile(r"[!@#$%^&*(),.<>{}\[\]\\;':\"/?|`~\-=_+]")

def password_strength(password):
    length = len(password)
    digit = bool(DIGIT_REGEX.search(password))
    uppercase = bool(UPPERCASE_REGEX.search(password))
    lowercase = bool(LOWERCASE_REGEX.search(password))
    special_char = bool(SPECIAL_CHAR_REGEX.search(password))
    
    # Critères simplifiés pour l'exemple, à ajuster selon vos besoins
    if length >= 12 and digit and uppercase and lowercase and special_char:
        return 'Fort'
    elif length >= 8:
        return 'Moyen'
    else:
        return 'Faible'




def analyze_password_from_keepass_file(file_path, password):
    # Load the Keepass database
    kp = PyKeePass(file_path, password=password)

    # Get all groups and entries in the KeePass file
    entries = kp.find_entries()

    # Initialize a dictionary to store the weak passwords
    weak_passwords = {}

    # Iterate over the entries
    for entry in entries:
        # Check if the password is weak
        if password_strength(entry.password) == 'Faible':
            # Add the username and password to the dictionary
            weak_passwords[entry.username] = entry.password

    # Print the results
    if weak_passwords:
        print(Fore.RED + 'Les mots de passe faibles suivants ont été trouvés:')
        for username, password in weak_passwords.items():
            print(f'{username}: {password}')
    else:
        print(Fore.GREEN + 'Aucun mot de passe faible trouvé.')

    return weak_passwords