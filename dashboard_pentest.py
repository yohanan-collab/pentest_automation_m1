import dash
from dash import Dash, dcc, html, dash_table, Input, Output, State, callback_context
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from dash_iconify import DashIconify
import plotly.graph_objects as go
import pandas as pd
import nmap

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB, dbc.icons.FONT_AWESOME], suppress_callback_exceptions=True,title="Pentest automation")

server = app.server

def detailed_scan(target):
    scanner = nmap.PortScanner()
    scanner.scan(target, arguments='-A -T4')
    return scanner[target]

def get_port_data():
    scan_results = detailed_scan("217.160.13.113")

    # Initialisation d'une liste pour stocker les données
    data = []

    # Parcourir les résultats du scan TCP
    for port in scan_results.get('tcp', {}):
        port_info = scan_results['tcp'][port]
        # Récupérer le service, le produit et la version
        status = port_info.get('state', '')
        service = port_info.get('name', '')
        product = port_info.get('product', '')
        version = port_info.get('version', '')
        # Ajouter au tableau de données
        if status == 'open':
            data.append({'Port': port,'Status':status, 'Service': service, 'Product': product, 'Version': version})

    return pd.DataFrame(data)

df_ports_services = get_port_data()

# df_ports_services = pd.DataFrame({
#     'Port': [22, 80, 443, 8080],
#     'Statut': ['Ouvert', 'Fermé', 'Filtré', 'Ouvert']
# })


df_vulnerabilities = pd.DataFrame({
    'Vulnérabilité': ['Haute', 'Moyenne', 'Critique', 'Faible'],
    'Nombre': [10, 15, 5, 20]
})

df_password_analysis = pd.DataFrame({
    'Niveau de Sécurité': ['Faible', 'Moyen', 'Fort'],
    'Nombre': [30, 50, 20]
})

df_authentication_tests = pd.DataFrame({
    'Test ID': [1, 2, 3, 4],
    'Résultat': ['Réussi', 'Échoué', 'Réussi', 'Échoué']
})

fig_ports_services = go.Figure(data=[go.Bar(x=df_ports_services['Port'], y=df_ports_services['Status'])])
fig_ports_services.update_layout(title="Ports et Services")



fig_vulnerabilities = go.Figure(data=[go.Pie(labels=df_vulnerabilities['Vulnérabilité'], values=df_vulnerabilities['Nombre'])])
fig_vulnerabilities.update_layout(title="Vulnérabilités")


fig_password_analysis = go.Figure(data=[go.Histogram(x=df_password_analysis['Niveau de Sécurité'], y=df_password_analysis['Nombre'])])
fig_password_analysis.update_layout(title="Analyse des Mots de Passe")


fig_authentication_tests = go.Figure(data=[go.Bar(x=df_authentication_tests['Test ID'], y=df_authentication_tests['Résultat'])])
fig_authentication_tests.update_layout(title="Tests d'Authentification")


navbar_style = {
    "backgroundColor": "#f8f9fa",
    "padding": "10px"
}

navlink_style = {
    "color": "#007bff",
    "padding": "10px 15px",
}

navlink_hover_style = {
    "backgroundColor": "#e9ecef",
    "borderRadius": "5px", 
}
def get_icon(icon):
    return DashIconify(icon=icon, height=16)

app.layout = dmc.MantineProvider(
    withGlobalStyles=True, 
    children=[
        dmc.Header(
            height=70,
            fixed=True,
            style={
                "zIndex": "1",
                "backgroundColor": "rgb(34, 139, 230)",
                "width": "100%",
            },
            children=[
                dmc.Container(
                    fluid=True,
                    children=[
                        dmc.Group(
                            position="apart",
                            children=[
                                dmc.Text(
                                    "Pentest Automation Dashboard",
                                    style={
                                        "color": "white",
                                        "fontFamily": "'Arial', sans-serif",
                                        "fontSize": "24px",
                                        "padding": "10px",
                                    }
                                ),
                                dmc.Group(
                                    children=[
                                        dmc.TextInput(id='scan-target', placeholder='Enter target for pentest', style={"width": "300px"}),
                                        dmc.Button('Scan', id='scan-button')
                                    ]
                                )
                            ]
                        )
                    ]
                )
            ]
        ),
        dmc.Navbar(
            fixed=True,
            width={"base": 300},
            position={"top": 0, "left": 0},
            zIndex=1,
            children=[
                dmc.ScrollArea(
                    offsetScrollbars=True,
                    type="scroll",
                    children=[
                        html.Br(),
                        html.Div(
                            [
                                dmc.NavLink(
                                    label="Dashboard",
                                    icon=get_icon(icon="ant-design:home-filled"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="filled",
                                    href="/",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Ports and Services",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/ports-services",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Vulnerabilities",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/vulnerabilities",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Password Analysis",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/password-analysis",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Authentication Tests",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/authentication-tests",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Rapports",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    href="/rapports",
                                    active=True,
                                ),                                
                            ],
                            className="nav flex-column",
                        )
                    ]
                )
            ]
        ),

        dmc.Container(
            fluid=True,
            children=[
                html.Div(id='content')
            ],
            style={"marginLeft": "300px" ,"marginTop":"80px"}
        ),

        dcc.Location(id='url'),
    ]
)


@app.callback(
    Output('content', 'children'),
    [Input('url', 'pathname')],
    
)
def display_page(pathname):
    if pathname == '/':
        return dashboard_layout()
    elif pathname == '/ports-services':
        return ports_services_layout()
    elif pathname == '/vulnerabilities':
        return vulnerabilities_layout()
    elif pathname == '/password-analysis':
        return password_analysis_layout()
    elif pathname == '/authentication-tests':
        return authentication_tests_layout()
    elif pathname == '/rapports':
        return rapports_layout()
    else:
        return "Page not found"

def dashboard_layout():
    return html.Div([
        html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Statistiques", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
        dbc.Container([
            dmc.Group(
                [
                    dmc.RingProgress(
                        id="ring-progress-1",
                        sections=[{"value": 33, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("33%", color="indigo")),
                        style={"margin": "20px", "width": "100px", "height": "100px"}
                    ),
                    dmc.RingProgress(
                        id="ring-progress-2",
                        sections=[{"value": 33, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("33%", color="indigo")),
                        style={"margin": "20px", "width": "100px", "height": "100px"}
                    ),
                    dmc.RingProgress(
                        id="ring-progress-3",
                        sections=[{"value": 33, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("33%", color="indigo")),
                        style={"margin": "20px", "width": "100px", "height": "100px"}
                    ),
                    dmc.RingProgress(
                        id="ring-progress-4",
                        sections=[{"value": 33, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("33%", color="indigo")),
                        style={"margin": "20px", "width": "100px", "height": "100px"}
                    ),
                ],
                align="center",
                style={"display": "flex", "justify-content": "space-around"}
            ),
            
            dbc.Row([
                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_ports_services)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}), 
                ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_vulnerabilities)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px","marginTop":"95px"}),

            dbc.Row([
                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_password_analysis)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_authentication_tests)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px"}),
        ], fluid=True, className="ms-1")
    ])

def generate_table(dataframe):
    header = html.Thead(
        html.Tr([html.Th(col) for col in dataframe.columns])
    )

    rows = []
    for i, row in dataframe.iterrows():
        bgcolor = 'rgb(248, 248, 248)' if i % 2 == 1 else 'white'
        cells = [html.Td(data) for data in row]
        rows.append(html.Tr(cells, style={'backgroundColor': bgcolor}))

    table_body = html.Tbody(rows)

    table = dmc.Table(
        verticalSpacing="sm",
        horizontalSpacing=10,
        children=[header, table_body],
        style={'overflowX': 'auto', 'textAlign': 'left'}
    )

    box_style = {
        'border': '1px solid lightgrey',
        'boxShadow': '0 2px 4px rgba(0,0,0,.1)',
        'borderRadius': '5px',
        'padding': '10px',
        'marginTop': '20px',
        'marginBottom': '20px'
    }

    return html.Div(table, style=box_style)

def ports_services_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Ports and Services", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Ports and Services", 
                        children=[html.Div(generate_table(df_ports_services),className="mb-2")
                        ]),
                            width=12,
                            lg=5,     
                ),

            ],justify='center')       
            
def vulnerabilities_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Vulnérabilités Détectées", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Vulnérabilités Détectées", 
                        children=[html.Div(generate_table(df_vulnerabilities),className="mb-2")
                        ]),
                            width=12,
                            lg=5,     
                ),

            ],justify='center')

def password_analysis_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Analyse des Mots de Passe", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Analyse des Mots de Passe", 
                        children=[html.Div(generate_table(df_password_analysis),className="mb-2")
                        ]),
                            width=12,
                            lg=5,     
                ),

            ],justify='center') 

def authentication_tests_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Tests d'Authentification", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Tests d'Authentification", 
                        children=[html.Div(generate_table(df_authentication_tests),className="mb-2")
                        ]),
                            width=12,
                            lg=5,     
                ),

            ],justify='center')

def rapports_layout():
    rapports = ["rapport1.pdf", "rapport2.pdf", "rapport3.pdf","rapport4.pdf", "rapport5.pdf", "rapport6.pdf"]

    return dmc.Container(
        fluid=True,
        children=[
            dmc.Title("Rapports de Scan", order=3, style={"textAlign": "center", "margin": "40px"}),
            dmc.SimpleGrid(
                cols=4,
                spacing="lg",
                children=[
                    dmc.Card(
                        shadow="sm",
                        p="lg",
                        radius="md",
                        withBorder=True,
                        children=[
                            dmc.Text(rapport, size="md", align="center"),
                            dmc.Button("Télécharger", variant="outline", fullWidth=True, style={"marginTop": "10px"})
                        ]
                    ) for rapport in rapports
                ]
            )
        ]
    )


if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0')
