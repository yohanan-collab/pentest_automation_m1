import dash
from dash import Dash, dcc, html, dash_table, Input, Output, State, callback_context
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from dash_iconify import DashIconify
import plotly.graph_objects as go
import pandas as pd
import nmap
import re

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB, dbc.icons.FONT_AWESOME], suppress_callback_exceptions=True,title="Pentest automation")

server = app.server

def detailed_scan(target):
    scanner = nmap.PortScanner()
    scanner.scan(target, arguments='-A -T4')
    return scanner[target]

def get_port_data():
    scan_results = detailed_scan("10.104.1.122")

    data = []

    for port in scan_results.get('tcp', {}):
        port_info = scan_results['tcp'][port]

        status = port_info.get('state', '')
        service = port_info.get('name', '')
        product = port_info.get('product', '')
        version = port_info.get('version', '')

        if status == 'open':
            data.append({'Port': port,'Status':status, 'Service': service, 'Product': product, 'Version': version})

    return pd.DataFrame(data)

df_ports_services = get_port_data()
nombre_ports_ouverts = len(df_ports_services)


df_vulnerabilities = pd.DataFrame({
    'Vulnérabilité': ['Haute', 'Moyenne', 'Critique', 'Faible'],
    'Nombre': [10, 15, 5, 20]
})

# df_password_analysis = pd.DataFrame({
#     'Niveau de Sécurité': ['Faible', 'Moyen', 'Fort'],
#     'Nombre': [30, 50, 20]
# })
# Configuration des expressions régulières pour les différents critères
DIGIT_REGEX = re.compile(r"\d")
UPPERCASE_REGEX = re.compile(r"[A-Z]")
LOWERCASE_REGEX = re.compile(r"[a-z]")
SPECIAL_CHAR_REGEX = re.compile(r"[!@#$%^&*(),.<>{}\[\]\\;':\"/?|`~\-=_+]")

def password_strength(password):
    length = len(password)
    digit = bool(DIGIT_REGEX.search(password))
    uppercase = bool(UPPERCASE_REGEX.search(password))
    lowercase = bool(LOWERCASE_REGEX.search(password))
    special_char = bool(SPECIAL_CHAR_REGEX.search(password))
    
    # Critères simplifiés pour l'exemple, à ajuster selon vos besoins
    if length >= 12 and digit and uppercase and lowercase and special_char:
        return 'Fort'
    elif length >= 8:
        return 'Moyen'
    else:
        return 'Faible'

def analyze_passwords_from_file(file_path):
    password_strength_counts = {'Faible': 0, 'Moyen': 0, 'Fort': 0}

    with open(file_path, 'r') as file:
        for password in file:
            password = password.strip()
            strength_category = password_strength(password)
            password_strength_counts[strength_category] += 1

    return password_strength_counts

# Exemple d'utilisation
file_path = 'passwords_to_check.txt'  # Remplacez par le chemin vers votre fichier de mots de passe
password_strength_counts = analyze_passwords_from_file(file_path)

# Création d'un DataFrame avec les résultats
df_password_analysis = pd.DataFrame(list(password_strength_counts.items()), columns=['Niveau de Sécurité', 'Nombre'])

df_authentication_tests = pd.DataFrame({
    'Test ID': [1, 2, 3, 4],
    'Résultat': ['Réussi', 'Échoué', 'Réussi', 'Échoué']
})

fig_ports_services = go.Figure(data=[go.Bar(x=df_ports_services['Port'], y=df_ports_services['Status'])])
fig_ports_services.update_layout(title="Ports et Services")



fig_vulnerabilities = go.Figure(data=[go.Pie(labels=df_vulnerabilities['Vulnérabilité'], values=df_vulnerabilities['Nombre'])])
fig_vulnerabilities.update_layout(title="Vulnérabilités")


fig_password_analysis = go.Figure(data=[go.Histogram(x=df_password_analysis['Niveau de Sécurité'], y=df_password_analysis['Nombre'])])
fig_password_analysis.update_layout(title="Analyse des Mots de Passe")


fig_authentication_tests = go.Figure(data=[go.Bar(x=df_authentication_tests['Test ID'], y=df_authentication_tests['Résultat'])])
fig_authentication_tests.update_layout(title="Tests d'Authentification")


navbar_style = {
    "backgroundColor": "#f8f9fa",
    "padding": "10px"
}

navlink_style = {
    "color": "#007bff",
    "padding": "10px 15px",
}

navlink_hover_style = {
    "backgroundColor": "#e9ecef",
    "borderRadius": "5px", 
}
def get_icon(icon):
    return DashIconify(icon=icon, height=16)

app.layout = dmc.MantineProvider(
    withGlobalStyles=True, 
    children=[
        dmc.Header(
            height=70,
            fixed=True,
            style={
                "zIndex": "1",
                "backgroundColor": "rgb(34, 139, 230)",
                "width": "100%",
            },
            children=[
                dmc.Container(
                    fluid=True,
                    children=[
                        dmc.Group(
                            position="apart",
                            children=[
                                dmc.Text(
                                    "OoVulnScan",
                                    style={
                                        "color": "white",
                                        "fontFamily": "'Arial', sans-serif",
                                        "fontSize": "24px",
                                        "padding": "10px",
                                    }
                                ),
                                dmc.Group(
                                    children=[
                                        dmc.TextInput(id='scan-target', placeholder='Enter target for pentest', style={"width": "300px"}),
                                        dmc.Button('Scan', id='scan-button')
                                    ]
                                )
                            ]
                        )
                    ]
                )
            ]
        ),
        dmc.Navbar(
            fixed=True,
            width={"base": 300},
            position={"top": 0, "left": 0},
            bg = 'rgb(248, 248, 248)',
            withBorder =True,
            zIndex=1,
            children=[
                dmc.ScrollArea(
                    offsetScrollbars=True,
                    type="scroll",
                    children=[
                        html.Br(),
                        html.Div(
                            [
                                dmc.NavLink(
                                    label="Home",
                                    icon=get_icon(icon="ant-design:home-filled"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="filled",
                                    href="/home",
                                    active=True
                                )
                            ]),
                        html.Br(),
                        html.Div(
                            style={'position': 'relative', 'text-align': 'center'}, 
                            children=[
                                html.Hr(style={'border-top': '2px solid black', 'margin-top': '20px','margin-bottom': '30px'}),
                                html.Span("Scan", 
                                        style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                                'background-color': 'rgb(248, 248, 248)', 'padding': '0 8px'}),
                            ]
                        ),
                        html.Div(
                            [
                                dmc.NavLink(
                                    label="Nouveau Scan",
                                    icon=get_icon(icon="tabler:search"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="filled",
                                    href="/new-scan",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Derniers scans",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/ports-services",
                                    active=True,
                                ),                               
                            ],
                            className="nav flex-column",
                        ),
                        html.Br(),
                        html.Div(
                            style={'position': 'relative', 'text-align': 'center'}, 
                            children=[
                                html.Hr(style={'border-top': '2px solid black', 'margin-top': '20px','margin-bottom': '30px'}),
                                html.Span("Visualisation", 
                                        style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                                'background-color': 'rgb(248, 248, 248)', 'padding': '0 8px'}),
                            ]
                        ),
                        html.Div(
                            [
                                dmc.NavLink(
                                    label="Dashboard",
                                    icon=get_icon(icon="tabler:chart-pie"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="filled",
                                    href="/",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Ports and Services",
                                    icon=get_icon(icon="tabler:network"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/ports-services",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Vulnerabilities",
                                    icon=get_icon(icon="tabler:virus"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/vulnerabilities",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Password Analysis",
                                    icon=get_icon(icon="tabler:lock-open"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/password-analysis",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Authentication Tests",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/authentication-tests",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Rapports",
                                    icon=get_icon(icon="tabler:activity"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    href="/rapports",
                                    active=True,
                                ),                                
                            ],
                            className="nav flex-column",
                        )
                    ]
                )
            ]
        ),

        dmc.Container(
            fluid=True,
            children=[
                html.Div(id='content')
            ],
            style={"marginLeft": "300px" ,"marginTop":"80px"}
        ),

        dcc.Location(id='url'),
    ]
)


@app.callback(
    Output('content', 'children'),
    [Input('url', 'pathname')],
    
)
def display_page(pathname):
    if pathname == '/':
        return dashboard_layout()
    elif pathname == '/home':
        return home()
    elif pathname == '/new-scan':
        return new_scan()
    elif pathname == '/ports-services':
        return ports_services_layout()
    elif pathname == '/vulnerabilities':
        return vulnerabilities_layout()
    elif pathname == '/password-analysis':
        return password_analysis_layout()
    elif pathname == '/authentication-tests':
        return authentication_tests_layout()
    elif pathname == '/rapports':
        return rapports_layout()

def home():
    ascii_art = """
   
 ▒█████   ▒█████   ██▒   █▓ █    ██  ██▓     ███▄    █   ██████  ▄████▄   ▄▄▄       ███▄    █ 
▒██▒  ██▒▒██▒  ██▒▓██░   █▒ ██  ▓██▒▓██▒     ██ ▀█   █ ▒██    ▒ ▒██▀ ▀█  ▒████▄     ██ ▀█   █ 
▒██░  ██▒▒██░  ██▒ ▓██  █▒░▓██  ▒██░▒██░    ▓██  ▀█ ██▒░ ▓██▄   ▒▓█    ▄ ▒██  ▀█▄  ▓██  ▀█ ██▒
▒██   ██░▒██   ██░  ▒██ █░░▓▓█  ░██░▒██░    ▓██▒  ▐▌██▒  ▒   ██▒▒▓▓▄ ▄██▒░██▄▄▄▄██ ▓██▒  ▐▌██▒
░ ████▓▒░░ ████▓▒░   ▒▀█░  ▒▒█████▓ ░██████▒▒██░   ▓██░▒██████▒▒▒ ▓███▀ ░ ▓█   ▓██▒▒██░   ▓██░
░ ▒░▒░▒░ ░ ▒░▒░▒░    ░ ▐░  ░▒▓▒ ▒ ▒ ░ ▒░▓  ░░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░░ ░▒ ▒  ░ ▒▒   ▓▒█░░ ▒░   ▒ ▒ 
  ░ ▒ ▒░   ░ ▒ ▒░    ░ ░░  ░░▒░ ░ ░ ░ ░ ▒  ░░ ░░   ░ ▒░░ ░▒  ░ ░  ░  ▒     ▒   ▒▒ ░░ ░░   ░ ▒░
░ ░ ░ ▒  ░ ░ ░ ▒       ░░   ░░░ ░ ░   ░ ░      ░   ░ ░ ░  ░  ░  ░          ░   ▒      ░   ░ ░ 
    ░ ░      ░ ░        ░     ░         ░  ░         ░       ░  ░ ░            ░  ░         ░ 
                       ░                                        ░                             

    """
    return html.Div([
        dmc.Container([
            dmc.Paper([
                html.Pre(ascii_art, style={"white-space": "pre", "font-family": "monospace", "font-size": "23px"}),
            ], p="lg", ta="center",style={"overflow": "auto","maxWidth": "100%"}),

            

            dmc.Title("Welcome to the Security Toolkit", order=2,align="center"),

            dmc.Space(h="md"),

            dmc.Text("Your one-stop solution for security scanning and analysis. Navigate through the application to access various tools designed to enhance your cybersecurity posture.", align="center"),

            dmc.Space(h="md"),

            dmc.Group([
                dmc.Button("Start Scanning", variant="filled", color="green"),
                dmc.Button("Learn More", variant="outline", color="blue")
            ], position="center", spacing="xl")
        ],style={ "maxWidth": "1300px", "margin": "0 auto"} ),
    ], style={"padding": "40px"})

def new_scan():
    return html.Div([
        dmc.Container([
            dmc.Title("Security Testing Toolkit", order=1, align='center', m='50px'),

            dmc.Grid([
                # Colonne pour la Timeline
                dmc.Col(
                    dmc.Timeline(
                        active=1,
                        bulletSize=15,
                        lineWidth=2,
                        children=[
                            dmc.TimelineItem(
                                title="New Branch",
                                children=[
                                    dmc.Text(
                                        [
                                            "You've created new branch ",
                                            dmc.Anchor("fix-notification", href="#", size="sm"),
                                            " from master",
                                        ],
                                        color="dimmed",
                                        size="sm",
                                    ),
                                ],
                            ),
                            dmc.TimelineItem(
                                title="Commits",
                                children=[
                                    dmc.Text(
                                        [
                                            "You've pushed 23 commits to ",
                                            dmc.Anchor("fix-notification", href="#", size="sm"),
                                        ],
                                        color="dimmed",
                                        size="sm",
                                    ),
                                ],
                            ),
                            dmc.TimelineItem(
                                title="Pull Request",
                                lineVariant="dashed",
                                children=[
                                    dmc.Text(
                                        [
                                            "You've submitted a pull request ",
                                            dmc.Anchor(
                                                "Fix incorrect notification message (#178)",
                                                href="#",
                                                size="sm",
                                            ),
                                        ],
                                        color="dimmed",
                                        size="sm",
                                    ),
                                ],
                            ),
                            dmc.TimelineItem(
                                title="Code Review",
                                children=[
                                    dmc.Text(
                                        [
                                            dmc.Anchor(
                                                "Ann Marie Ward",
                                                href="#",
                                                size="sm",
                                            ),
                                            " left a comment on your pull request",
                                        ],
                                        color="dimmed",
                                        size="sm",
                                    ),
                                ],
                            ),
                        ],
                    ), span=6
                ),
                # Colonne pour le groupe de boutons
                dmc.Col(
                    dmc.Group([
                        dmc.Button("Recon", id="btn-recon"),
                        dmc.Button("Scanning", id="btn-scanning"),
                        dmc.Button("Exploit", id="btn-exploit"),
                        dmc.Button("OSINT", id="btn-osint"),
                        dmc.Button("Generate a PDF report on the target", id="btn-pdf-report"),
                        dmc.Button("Generate reverse shell one liner", id="btn-reverse-shell"),
                        dmc.Button("Exit program", color="yellow", id="btn-exit")
                    ], spacing="xl"),
                    span=6
                ),
            ]),

            dmc.Space(h="xl"),

            dmc.Text("", id="menu-selection", color="blue", size="xl"),
        ])
    ])
@app.callback(
    Output("menu-selection", "children"),
    [Input("btn-recon", "n_clicks"),
     Input("btn-scanning", "n_clicks"),
     Input("btn-exploit", "n_clicks"),
     Input("btn-osint", "n_clicks"),
     Input("btn-pdf-report", "n_clicks"),
     Input("btn-reverse-shell", "n_clicks"),
     Input("btn-exit", "n_clicks")]
)
def update_menu(btn_recon, btn_scanning, btn_exploit, btn_osint, btn_pdf_report, btn_reverse_shell, btn_exit):
    ctx = dash.callback_context

    if not ctx.triggered:
        return "Choose an option to begin"
    else:
        button_id = ctx.triggered[0]["prop_id"].split(".")[0]

        if button_id == "btn-recon":
            return "Recon selected. Choose a specific action: Basic Whois request, Look for a CVE, etc."
        elif button_id == "btn-scanning":
            return "Scanning selected. Choose a specific action: Nmap port scan, Nikto scan, etc."
        elif button_id == "btn-exploit":
            return "Exploit selected. Choose a specific action: Search for vuln and exploits on a service."
        elif button_id == "btn-osint":
            return "OSINT selected. Choose a specific action: Look for username on social medias, etc."
        elif button_id == "btn-pdf-report":
            return "Generate a PDF report on the target."
        elif button_id == "btn-reverse-shell":
            return "Generate reverse shell one liner."
        elif button_id == "btn-exit":
            return "Exiting program."
        else:
            return "Choose an option to begin"

def dashboard_layout():
    return html.Div([
        
        dbc.Container([
            html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Statistiques", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
            dmc.Group(
                [
                    dmc.RingProgress(
                        id="ring-progress-1",
                        size=200,
                        sections=[{"value": 10, "color": "indigo"}],
                        label=dmc.Center(dmc.Text(f"{nombre_ports_ouverts} ports ouverts", color="indigo")),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-2",
                        size=200,
                        sections=[{"value": 33, "color": "indigo"}],
                        label=dmc.Center(dmc.Text(f"{password_strength_counts['Faible']} passwords faibles", color="indigo")),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-3",
                        size=200,
                        sections=[{"value": 20, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("10 vulnérabilités critiques", color="indigo",align='center')),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-4",
                        size=200,
                        sections=[{"value": 50, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("2 tests réussis", color="indigo",align='center')),
                    ),
                ],
                position ="center",  
            ),
            html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Visualisation", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
            
            dbc.Row([
                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_ports_services)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}), 
                ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_vulnerabilities)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px","marginTop":"25px"}),

            dbc.Row([
                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_password_analysis)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_authentication_tests)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px"}),
        ], fluid=True, className="ms-1")
    ])

def generate_table(dataframe):
    header = html.Thead(
        html.Tr([html.Th(col) for col in dataframe.columns])
    )

    rows = []
    for i, row in dataframe.iterrows():
        bgcolor = 'rgb(248, 248, 248)' if i % 2 == 1 else 'white'
        cells = [html.Td(data) for data in row]
        rows.append(html.Tr(cells, style={'backgroundColor': bgcolor}))

    table_body = html.Tbody(rows)

    table = dmc.Table(
        verticalSpacing="sm",
        horizontalSpacing=10,
        children=[header, table_body],
        style={'overflowX': 'auto', 'textAlign': 'left','width':'100%'}
    )

    box_style = {
        'border': '1px solid lightgrey',
        'boxShadow': '0 2px 4px rgba(0,0,0,.1)',
        'borderRadius': '5px',
        'padding': '10px',
        'marginTop': '20px',
        'marginBottom': '20px'
    }

    return html.Div(table, style=box_style)

def ports_services_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Ports and Services", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Ports and Services", 
                        children=[html.Div(generate_table(df_ports_services),className="mb-2")
                        ]),
                            width=12,
                            lg=10,     
                ),

            ],justify='center')       
            
def vulnerabilities_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Vulnérabilités Détectées", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Vulnérabilités Détectées", 
                        children=[html.Div(generate_table(df_vulnerabilities),className="mb-2")
                        ]),
                            width=12,
                            lg=10,     
                ),

            ],justify='center')

def password_analysis_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Analyse des Mots de Passe", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Analyse des Mots de Passe", 
                        children=[html.Div(generate_table(df_password_analysis),className="mb-2")
                        ]),
                            width=12,
                            lg=10,     
                ),

            ],justify='center') 

def authentication_tests_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Tests d'Authentification", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Tests d'Authentification", 
                        children=[html.Div(generate_table(df_authentication_tests),className="mb-2")
                        ]),
                            width=12,
                            lg=10,     
                ),

            ],justify='center')

def rapports_layout():
    rapports = ["rapport1.pdf", "rapport2.pdf", "rapport3.pdf","rapport4.pdf", "rapport5.pdf", "rapport6.pdf"]

    return dmc.Container(
        fluid=True,
        children=[
            dmc.Title("Rapports de Scan", order=3, style={"textAlign": "center", "margin": "40px"}),
            dmc.SimpleGrid(
                cols=4,
                spacing="lg",
                children=[
                    dmc.Card(
                        shadow="sm",
                        p="lg",
                        radius="md",
                        withBorder=True,
                        children=[
                            dmc.Text(rapport, size="md", align="center"),
                            dmc.Button("Télécharger", variant="outline", fullWidth=True, style={"marginTop": "10px"})
                        ]
                    ) for rapport in rapports
                ]
            )
        ]
    )


if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0')
