import os
import colorama
from colorama import Fore, Back, Style
import subprocess
from tabulate import tabulate
import nmap
from datetime import datetime
import re
import vulners

def banner():
    print("   _____                  ____        __  \n" +
          "  / ___/_________ _____  / __ )____  / /_\n" +
          "  \\__ \\/ ___/ __ `/ __ \\/ __  / __ \\/ __/\n" +
          " ___/ / /__/ /_/ / / / / /_/ / /_/ / /_\n" +
          "/____/\\___/\\__,_/_/ /_/_____/\\____/\\__/\n" +
          "                                         \n")


def extract_version(version_string):
    # Utilisation d'une expression régulière pour extraire la version principale (par exemple, "7.6")
    version_match = re.search(r'(\d+\.\d+)', version_string)
    if version_match:
        return version_match.group(1)
    else:
        return ''

def Nmap(ip):
    nm = nmap.PortScanner()
    nm.scan(ip, '21-443')

    results = []

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                state = nm[host][proto][port]['state']
                if state == 'open':
                    service = nm[host][proto][port]['name']
                    version = nm[host][proto][port]['version'] if 'version' in nm[host][proto][port] else ''
                    results.append([host, port, service, version])

    return results

def nouveau_scan():
    target = input("Entrez la cible : ")
    results = Nmap(target)

    if results:
        headers = ["ID", "Port", "Service", "Version"]
        formatted_results = [[i+1, result[1], result[2], result[3]] for i, result in enumerate(results)]
        print(tabulate(formatted_results, headers=headers, tablefmt="grid"))
        search_cve(results)
    else:
        print("No open ports found.")

def search_cve(results):
    if not results:
        print("Aucun scan n'a été effectué.")
        return

    choice = input("Entrez le numéro de port pour voir les CVE associés : ")
    try:
        choice = int(choice)
        if 1 <= choice <= len(results):
            port_info = results[choice - 1]
            service, version = port_info[2], port_info[3]

            # Create a Vulners API client
            api = vulners.Vulners('84H4FQ2JHSCZB3DB0EWTDDJQEVOJUK2WFAF74T3HMQ8DU51APYFHLKWJYKYE4KMA')

            # Get software vulnerabilities for a specific product and version
            results = api.get_software_vulnerabilities(service, version)

            # Extract the exploit information from the results
            exploit_list = results.get('exploit')
            
            search_result = api.searchExploit(service, version)

            # Extract the vulnerabilities list from the results
            vulnerabilities_list = [results.get(key) for key in results]

            if vulnerabilities_list:
                print("CVE associés au port {} :".format(port_info[1]))
                for cve_info in vulnerabilities_list:
                    print("CVE :", cve_info['CVE'])
                    print("Score CVSS :", cve_info['cvss']['score'])
                    print("Lien :", cve_info['references']['url'])
            else:
                print("Aucun CVE trouvé pour le port {}.".format(port_info[1]))
        else:
            print("Choix invalide.")
    except ValueError:
        print("Choix invalide.")

def analyse_password():
    print("Fonctionnalité à venir")

def osint():
    print("Fonctionnalité à venir")

colorama.init()
banner()
while True:
    print(Fore.WHITE + "1. Nouveau scan")
    print(Fore.WHITE + "2. Derniers scans effectués")
    print(Fore.WHITE + "3. Search CVE")
    print(Fore.WHITE + "4. Analyse de password")
    print(Fore.WHITE + "5. Osint")
    print(Fore.WHITE + "6. Quitter")
    choice = input("Entrez votre choix : ")
    if choice == '1':
        nouveau_scan()
        
    elif choice == '2':
        derniers_scans()
    elif choice == '3':
        search_cve()
    elif choice == '4':
        analyse_password()
    elif choice == '5':
        osint()
    elif choice == '6':
        break
    else:
        print(Fore.RED + "Choix invalide, veux-essayer encore?")