
# import vulners

# vulners_api = vulners.VulnersApi('84H4FQ2JHSCZB3DB0EWTDDJQEVOJUK2WFAF74T3HMQ8DU51APYFHLKWJYKYE4KMA')

# results = vulners_api.get_software_vulnerabilities("http", "1.2")
# exploit_list = results.get('exploit')
# vulnerabilities_list = [results.get(key) for key in results if key in ['exploit']]

# for cve_info in vulnerabilities_list:
#     print("CVE :", cve_info['CVE'])
#     print("Score CVSS :", cve_info['cvss']['score'])
#     print("Lien :", cve_info['references']['url'])

# print(exploit_list)

"""
Script to search for CVEs associated with a product and version using the Vulners API.
"""
import argparse
import vulners

API_KEY = "CYJ25C4XL7OP1HOUEGCOJVAKAV988NKAHPX6V63H7HSLAJODJT5TT6FIQ7RHR0DD"


def search_cve_for_product(product_name, product_version):
    """
    Search for CVEs associated with a product and version using the Vulners API.
    """
    try:
        vulners_api = vulners.VulnersApi(api_key=API_KEY)
        query = f"{product_name} {product_version}"
        cve_results = vulners_api.find_all(query)

        found_cves = False
        print(cve_results)
        for result in cve_results:
            if "id" in result:
                if not found_cves:
                    print(f"Vulnerabilities found for '{query}':")
                    found_cves = True
                print(f"CVE ID: {result['id']}")
                print("-" * 40)

        if not found_cves:
            print(f"No vulnerabilities found for '{query}'.")

    except Exception as e:
        print(f"An error occurred: {e}")


def main():
    """
    Main function to parse command-line arguments and execute CVE search.
    """
    parser = argparse.ArgumentParser(
        description="Search for CVEs associated with a product and version using the Vulners API."
    )
    parser.add_argument("product_name", type=str, help="Name of the product")
    parser.add_argument("product_version", type=str, help="Version of the product")
    args = parser.parse_args()

    search_cve_for_product(args.product_name, args.product_version)


if __name__ == "__main__":
    main()