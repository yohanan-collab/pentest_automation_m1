import os
import subprocess
import dash
from dash import Dash, dcc, html, dash_table, Input, Output, State, callback_context,ALL
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from dash_iconify import DashIconify
import plotly.graph_objects as go
import pandas as pd
import xmltodict
import json

from dash.exceptions import PreventUpdate
from options.password_analysis import analyze_passwords_from_file
from home import home
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SPACELAB, dbc.icons.FONT_AWESOME], suppress_callback_exceptions=True,title="Pentest automation")


server = app.server

json_file_path = 'output.json'

# Chargement des données JSON
with open(json_file_path, 'r') as file:
    data = json.load(file)

# Extraction des informations de port
ports_data = data['nmaprun']['host']['ports']['port']

# Préparation de la liste pour stocker les données extraites
extracted_data = []

for port in ports_data:
    if isinstance(port, dict):  # S'assurer que la donnée est bien un dictionnaire
        port_id = port['@portid']
        state = port['state']['@state']
        service_name = port.get('service', {}).get('@name', 'unknown')
        if state == 'open':
            extracted_data.append({'Port': port_id, 'State': state, 'Service': service_name})

# Conversion de la liste en DataFrame
df_ports_services = pd.DataFrame(extracted_data)
nombre_ports_ouverts = len(df_ports_services)

df_vulnerabilities = pd.DataFrame({
    'Vulnérabilité': ['Haute', 'Moyenne', 'Critique', 'Faible'],
    'Nombre': [10, 15, 5, 20]
})

df_authentication_tests = pd.DataFrame({
    'Test ID': [1, 2, 3, 4],
    'Résultat': ['Réussi', 'Échoué', 'Réussi', 'Échoué']
})

file_path = 'pentest_results.json'

with open(file_path, 'r') as file:
    pentest_results = json.load(file)

hostnames = [target["Hostname"] for target in pentest_results["Target"]]
scan_time = [target["Last Scan Time"] for target in pentest_results["Target"]]

hostnames = list(reversed(hostnames))
scan_time = list(reversed(scan_time))

first_hostnames = hostnames[0]

df_hostnames = pd.DataFrame({"Hostname": hostnames , "Last Scan Time": scan_time})

fig_ports_services = go.Figure(data=[go.Bar(x=df_ports_services['Port'], y=df_ports_services['Service'], text=df_ports_services['State'])])
fig_ports_services.update_layout(title="Ports et Services", xaxis_title="Port", yaxis_title="Service")


fig_vulnerabilities = go.Figure(data=[go.Pie(labels=df_vulnerabilities['Vulnérabilité'], values=df_vulnerabilities['Nombre'])])
fig_vulnerabilities.update_layout(title="Vulnérabilités")


file_path = 'passwords_to_check.txt'

password_strength_counts = analyze_passwords_from_file(file_path)

df_password_analysis = pd.DataFrame(list(password_strength_counts.items()), columns=['Niveau de Sécurité', 'Nombre'])

fig_password_analysis = go.Figure(data=[go.Histogram(x=df_password_analysis['Niveau de Sécurité'], y=df_password_analysis['Nombre'])])
fig_password_analysis.update_layout(title="Analyse des Mots de Passe")


fig_authentication_tests = go.Figure(data=[go.Bar(x=df_authentication_tests['Test ID'], y=df_authentication_tests['Résultat'])])
fig_authentication_tests.update_layout(title="Tests d'Authentification")


def get_icon(icon):
    return DashIconify(icon=icon, height=16)


app.layout = dmc.MantineProvider(
    withGlobalStyles=True, 
    children=[
        dmc.Header(
            height=70,
            fixed=True,
            style={
                "zIndex": "1",
                "backgroundColor": "rgb(34, 139, 230)",
                "width": "100%",
            },
            children=[
                dmc.Container(
                    fluid=True,
                    children=[
                        dmc.Group(
                            position="apart",
                            children=[
                                dmc.Anchor(
                                    "ScanBot",
                                    href="/",
                                    style={
                                        "color": "white",
                                        "fontFamily": "'Arial', sans-serif",
                                        "fontSize": "30px",
                                        "padding": "10px",
                                    }
                                ),
                                
                                dmc.MantineProvider(
                                    inherit=True,
                                    theme={
                                        "components": {
                                            "Badge": {
                                                "styles": {
                                                    "root": {"borderWidth": 1, "height": 30, "padding": 10, "color": "white"},
                                                    "inner": {"fontWeight": 500},
                                                }
                                            }
                                        }
                                    },
                                    children=[dmc.Badge(f"Cible actuelle : {first_hostnames}", variant="dot",color='green')],
                                )
                                
                            ]
                        )
                    ]
                )
            ]
        ),
        dmc.Navbar(
            fixed=True,
            width={"base": 300},
            position={"top": 0, "left": 0},
            bg = 'rgb(248, 248, 248)',
            withBorder =True,
            zIndex=1,
            children=[
                dmc.ScrollArea(
                    offsetScrollbars=True,
                    type="scroll",
                    children=[
                        
                        html.Br(),
                        html.Div(
                            style={'position': 'relative', 'text-align': 'center'}, 
                            children=[
                                html.Hr(style={'border-top': '2px solid black', 'margin-top': '10px','margin-bottom': '30px'}),
                                html.Span("Scan", 
                                        style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                                'background-color': 'rgb(248, 248, 248)', 'padding': '0 8px'}),
                            ]
                        ),
                        html.Div(
                            [
                                dmc.NavLink(
                                    label="Nouveau Scan",
                                    icon=get_icon(icon="tabler:search"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="filled",
                                    href="/new-scan",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Derniers scans",
                                    icon=get_icon(icon="tabler:database"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/dernier-scan",
                                    active=True,
                                ),                               
                            ],
                            className="nav flex-column",
                        ),
                        html.Br(),
                        html.Div(
                            style={'position': 'relative', 'text-align': 'center'}, 
                            children=[
                                html.Hr(style={'border-top': '2px solid black', 'margin-top': '20px','margin-bottom': '30px'}),
                                html.Span("Visualisation", 
                                        style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                                'background-color': 'rgb(248, 248, 248)', 'padding': '0 8px'}),
                            ]
                        ),
                        html.Div(
                            [
                                dmc.NavLink(
                                    label="Dashboard",
                                    icon=get_icon(icon="tabler:chart-pie"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="filled",
                                    href="/dashboard",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Ports and Services",
                                    icon=get_icon(icon="tabler:network"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/ports-services",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Vulnerabilities",
                                    icon=get_icon(icon="tabler:virus"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/vulnerabilities",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Password Analysis",
                                    icon=get_icon(icon="tabler:lock-open"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/password-analysis",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Authentication Tests",
                                    icon=get_icon(icon="tabler:user"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    variant="subtle",
                                    href="/authentication-tests",
                                    active=True,
                                ),
                                dmc.NavLink(
                                    label="Rapports",
                                    icon=get_icon(icon="tabler:file"),
                                    rightSection=get_icon(icon="tabler-chevron-right"),
                                    href="/rapports",
                                    active=True,
                                ),                                
                            ],
                            className="nav flex-column",
                        )
                    ]
                )
            ]
        ),

        dmc.Container(
            fluid=True,
            children=[
                html.Div(id='content')
            ],
            style={"marginLeft": "300px" ,"marginTop":"80px"}
        ),

        dcc.Location(id='url'),
    ]
)


@app.callback(
    Output('content', 'children'),
    [Input('url', 'pathname')],
    
)
def display_page(pathname):
    if pathname == '/':
        return home()
    elif pathname == '/dashboard':
        return dashboard_layout()
    elif pathname == '/new-scan':
        return initial_content()
    elif pathname == '/dernier-scan':
        return dernier_scan()
    elif pathname == '/ports-services':
        return ports_services_layout()
    elif pathname == '/vulnerabilities':
        return vulnerabilities_layout()
    elif pathname == '/password-analysis':
        return password_analysis_layout()
    elif pathname == '/authentication-tests':
        return authentication_tests_layout()
    elif pathname == '/rapports':
        return rapports_layout()
    else:
        return "Page not found"


def initial_content():
    return html.Div([
        html.Div([
            dmc.Title("Nouveau Scan", order=2, align="center", style={"margin": "20px 0","font-size":"50px"}),
            dmc.TextInput(
                id='target-input',
                placeholder='Enter target for scanning',
                style={
                    "marginBottom": "20px",
                    "width": "100%",  # Utilisez 100% de la largeur du conteneur
                    "maxWidth": "500px",  # Limitez la largeur maximale pour une apparence soignée
                    "margin": "0 auto"  # Centre le TextInput horizontalement
                }
            ),
            dmc.Button(
                "Start Scan",
                id="start-scan-btn",
                n_clicks=0,
                style={
                    "display": "block",  # Assurez que le bouton soit un bloc pour permettre le centrage
                    "margin": "0 auto",  # Centre le bouton horizontalement
                    "marginTop": "10px"
                },
                color="blue",  # Changez la couleur du bouton (si supporté par le composant)
                variant="filled"  # Utilisez une variante remplie pour plus de visibilité
            )
        ], id='initial-content', style={"textAlign": "center"}),
        html.Div(id='new-scan-content'),
        html.Div(id='scan-results')
    ], style={
        "display": "flex",
        "flexDirection": "column",
        "alignItems": "center",
        "justifyContent": "center",
        
        "height": "90vh"  # Utilisez toute la hauteur de la fenêtre de visualisation pour le centrage vertical
    })


def generate_scan_options():
    return html.Div([
        dmc.Checkbox(id="nmap-check", label="Nmap", value=False),
        dmc.Checkbox(id="nikto-check", label="Nikto", value=False),
        dmc.Button("Lancer le scan", id="scan-button"),
        dmc.Text(id="result-label")
    ])

def last_target_from_json():
    json_file_path = "pentest_results.json"
    if os.path.exists(json_file_path):
        with open(json_file_path, 'r') as file:
            data = json.load(file)
        if data["Target"]:
            return data["Target"][-1]["Hostname"]
    return None

@app.callback(
    [Output('initial-content', 'children'),
     Output('new-scan-content', 'children'),
     Output('scan-results', 'children')],
    [Input('start-scan-btn', 'n_clicks')],
    [State('target-input', 'value')],
    prevent_initial_call=True
)
def update_content(n_clicks, hostname):
    if n_clicks > 0 and hostname:
        json_file_path = "pentest_results.json"
        if os.path.exists(json_file_path):
            with open(json_file_path, 'r') as file:
                data = json.load(file)
        else:
            data = {"Target": []}
        
        scan_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data["Target"].append({"Hostname": hostname, "Last Scan Time": scan_time})
        with open(json_file_path, 'w') as file:
            json.dump(data, file, indent=4)
        
        confirmation_message = f"Hostname {hostname} ajouté avec succès au fichier JSON."
        return None, generate_scan_options(), confirmation_message
    
    return dash.no_update, dash.no_update, dash.no_update

@app.callback(
    Output('result-label', 'children'),
    [Input('scan-button', 'n_clicks')],
    [State('nmap-check', 'checked'), State('nikto-check', 'checked')],
    # [State('nmap-value', 'value'), State('nikto-value', 'value')],
    prevent_initial_call=True
)
def perform_scan(n_clicks, nmap_checked, nikto_checked):
    if n_clicks > 0:
        target = last_target_from_json()
        if not target:
            return "Aucun hostname cible n'a été trouvé. Veuillez d'abord enregistrer un hostname."
        
        checked_tools = []
        result_texts = []
        
        if nmap_checked:
            checked_tools.append("nmap")
            command = ['nmap', '-A', '-T4', '-Pn', '-oX', 'nmap_out.xml', target]
            try:
                subprocess.run(command, check=True)
                # result_texts.append(f"Scan lancé pour {nmap_value}.")
                # Optionnel : convertir XML en JSON et lire le résultat
                convert_xml_json()
            except subprocess.CalledProcessError:
                result_texts.append(f"Erreur lors de l'exécution de Nmap pour {target}.")
        
        if nikto_checked:
            checked_tools.append("nikto")
            try:
                subprocess.run(["nikto", "-h", target, "-o", "nikto_scan_result.txt"], check=True)
                result_texts.append(f"Scan lancé pour {nikto_value}.")
                # Lire et afficher les résultats du scan Nikto
                with open('nikto_scan_result.txt', 'r') as file:
                    nikto_result = file.read()
                    # result_texts.append(nikto_result)
            except subprocess.CalledProcessError:
                result_texts.append(f"Erreur lors de l'exécution de Nikto pour {target}.")

        if not result_texts:
            return "Sélectionnez les outils à utiliser pour le scan."
        else:
            return "\n\n".join(result_texts)
    return "Cliquez sur le bouton pour lancer les scans."

def convert_xml_json():
    xml_file_path = 'nmap_out.xml'
    json_file_path = 'output.json'
    with open(xml_file_path, 'r', encoding='utf-8') as xml_file:
        xml_content = xml_file.read()

    dict_data = xmltodict.parse(xml_content)

    with open(json_file_path, 'w', encoding='utf-8') as json_file:
        json.dump(dict_data, json_file, ensure_ascii=False, indent=4)


def dernier_scan():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        dmc.Title("Derniers Scans réalisés", order=1,style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 20px'})
                       
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Derniers Scans réalisés", 
                        children=[html.Div(generate_table(df_hostnames),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center')   

def dashboard_layout():
    return html.Div([
        dbc.Container([
            html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Statistiques", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
            dmc.Group(
                [
                    dmc.RingProgress(
                        id="ring-progress-1",
                        size=200,
                        sections=[{"value": 10, "color": "indigo"}],
                        label=dmc.Center(dmc.Text(f"{nombre_ports_ouverts} ports ouverts", color="indigo")),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-2",
                        size=200,
                        sections=[{"value": 33, "color": "indigo"}],
                        label=dmc.Center(dmc.Text(f"{password_strength_counts['Faible']} passwords faibles", color="indigo")),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-3",
                        size=200,
                        sections=[{"value": 20, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("10 vulnérabilités critiques", color="indigo",align='center')),
                    ),
                    dmc.RingProgress(
                        id="ring-progress-4",
                        size=200,
                        sections=[{"value": 50, "color": "indigo"}],
                        label=dmc.Center(dmc.Text("2 tests réussis", color="indigo",align='center')),
                    ),
                ],
                position ="center",  
            ),
            html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Visualisation", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
        ]),
        dbc.Container([
            dbc.Row([
                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_ports_services)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}), 
                ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_vulnerabilities)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px","marginTop":"95px"}),

            dbc.Row([
                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_password_analysis)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),

                dbc.Col([
                    html.Div([
                        dcc.Graph(figure=fig_authentication_tests)
                    ], style={'border': '1px solid #ddd', 'padding': '15px', 'borderRadius': '5px','boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)'}),
                ], width=12, lg=6),
            ], justify="center",style={"marginBottom":"20px"}),
        ], fluid=True, className="ms-1")
    ])

def generate_table(dataframe):
    header = html.Thead(
        html.Tr([html.Th(col) for col in dataframe.columns])
    )

    rows = []
    for i, row in dataframe.iterrows():
        bgcolor = 'rgb(248, 248, 248)' if i % 2 == 1 else 'white'
        cells = [html.Td(data) for data in row]
        rows.append(html.Tr(cells, style={'backgroundColor': bgcolor}))

    table_body = html.Tbody(rows)

    table = dmc.Table(
        verticalSpacing="sm",
        horizontalSpacing=10,
        children=[header, table_body],
        style={'overflowX': 'auto', 'textAlign': 'left', 'width': '100%'}
    )

    # Style pour le div contenant le tableau pour permettre le défilement vertical
    table_container_style = {
        'maxHeight': '400px',  # Définir une hauteur maximale pour le conteneur
        'overflowY': 'auto'    # Permettre le défilement vertical
    }

    box_style = {
        'border': '1px solid lightgrey',
        'boxShadow': '0 2px 4px rgba(0,0,0,.1)',
        'borderRadius': '5px',
        'padding': '10px',
        'marginTop': '20px',
        'marginBottom': '20px'
    }

    # Envelopper le tableau dans un div avec un style pour le défilement vertical
    return html.Div(
        html.Div(table, style=table_container_style),  # Div pour le défilement
        style=box_style
    )



def ports_services_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Ports and Services", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Ports and Services", 
                        children=[html.Div(generate_table(df_ports_services),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center')
      
            
def vulnerabilities_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Vulnérabilités Détectées", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Vulnérabilités Détectées", 
                        children=[html.Div(generate_table(df_vulnerabilities),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center')

def password_analysis_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Analyse des Mots de Passe", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Analyse des Mots de Passe", 
                        children=[html.Div(generate_table(df_password_analysis),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center') 

def authentication_tests_layout():
    return dbc.Row([
                html.Div(
                    style={'position': 'relative', 'text-align': 'center'}, 
                    children=[
                        html.Hr(style={'border-top': '5px solid rgb(134, 142, 150)', 'margin-top': '20px'}),
                        html.Span("Tests d'Authentification", 
                                style={'position': 'absolute', 'left': '50%', 'top': '50%', 'transform': 'translate(-50%, -50%)',
                                        'background-color': 'white', 'padding': '0 10px'}),
                    ]
                ),
                dbc.Col(
                        dbc.Tab(label="Tests d'Authentification", 
                        children=[html.Div(generate_table(df_authentication_tests),className="mb-2")
                        ]),
                            width=12,
                            lg=9,     
                ),

            ],justify='center')

def rapports_layout():
    rapports = ["rapport1.pdf", "rapport2.pdf", "rapport3.pdf","rapport4.pdf", "rapport5.pdf", "rapport6.pdf"]

    return dmc.Container(
        fluid=True,
        children=[
            dmc.Title("Rapports de Scan", order=3, style={"textAlign": "center", "margin": "40px"}),
            dmc.SimpleGrid(
                cols=4,
                spacing="lg",
                children=[
                    dmc.Card(
                        shadow="sm",
                        p="lg",
                        radius="md",
                        withBorder=True,
                        children=[
                            dmc.Text(rapport, size="md", align="center"),
                            dmc.Button("Télécharger", variant="outline", fullWidth=True, style={"marginTop": "10px"})
                        ]
                    ) for rapport in rapports
                ]
            )
        ]
    )


if __name__ == '__main__':
    app.run_server(debug=True)

