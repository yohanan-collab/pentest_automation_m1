import re


DIGIT_REGEX = re.compile(r"\d")
UPPERCASE_REGEX = re.compile(r"[A-Z]")
LOWERCASE_REGEX = re.compile(r"[a-z]")
SPECIAL_CHAR_REGEX = re.compile(r"[!@#$%^&*(),.<>{}\[\]\\;':\"/?|`~\-=_+]")

def password_strength(password):
    length = len(password)
    digit = bool(DIGIT_REGEX.search(password))
    uppercase = bool(UPPERCASE_REGEX.search(password))
    lowercase = bool(LOWERCASE_REGEX.search(password))
    special_char = bool(SPECIAL_CHAR_REGEX.search(password))
    
    # Critères simplifiés pour l'exemple, à ajuster selon vos besoins
    if length >= 12 and digit and uppercase and lowercase and special_char:
        return 'Fort'
    elif length >= 8:
        return 'Moyen'
    else:
        return 'Faible'

def analyze_passwords_from_file(file_path):
    password_strength_counts = {'Faible': 0, 'Moyen': 0, 'Fort': 0}

    with open(file_path, 'r') as file:
        for password in file:
            password = password.strip()
            strength_category = password_strength(password)
            password_strength_counts[strength_category] += 1

    return password_strength_counts




