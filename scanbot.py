from datetime import datetime
import os
import subprocess
import sys
import colorama
import getpass
from colorama import Fore, Back, Style
from tabulate import tabulate
from options.certificat import getCertificate
from options.dnslookup import DNSLookUp
from options.new_scan import CveAllPort, CvePerPort, ExploitCVE, Nmap, NmapDiscover
from options.osint import osint
from options.password_analysis import password_strength
from options.password_analysis import analyze_password_from_keepass_file
from menu import CveMenu, Dashboard, ExploitCve, ExploitMenu, InfoMenu, OsintMenu, PasswordAnalyze, ServiceId, TargetMenu, displayMenu
from menu import displayHeader
from options.report_pdf import check_server, renderHTML
from options.search_cve import search_cve, searchsploit
import cve_searchsploit as CS
from fpdf import FPDF, HTMLMixin
import vulners
import sys
from weasyprint import HTML, CSS
import pkg_resources

from options.whoisrecon import whois_query
sys.path.append('/workspace/pentest_automation_m1/options/')
colorama.init()
displayHeader()

def start_dash_app():
    dash_process = subprocess.Popen(["python", "options/generate_dashboard.py"])
    dash_process.wait()
    
def Menu():
    while True:
        displayMenu()
        choice = input(">>> Choose an option\n>>> ")
        if choice == '1':
            TargetMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    while True:
                        target = input(Fore.CYAN + ">>> Enter the target\n>>> ")
                        results = NmapDiscover(target)
                        
                        if results:
                            headers = ["Port", "Service", "Version"]
                            formatted_results = [[index, result[0], result[1], result[2]] for index, result in enumerate(results)]
                            print(tabulate(formatted_results, headers=headers, tablefmt="grid"))
                            

                            while True:
                                CveMenu()
                                choice = input(">>> Enter your choice\n>>> ")
                                if choice == '1':
                                    CvePerPort(target)
                                    print('\n************************************\n')
                                    ExploitCVE()
                                elif choice == '2':
                                    CveAllPort(target)
                                    print('\n************************************\n')
                                    ExploitCVE()
                                    Menu()
                                else:
                                    Menu()
                                # if choice == '1':
                                #     while True:
                                #         ServiceId()
                                #         choix = input(">>> Enter your choice\n>>> ")

                                #         if choix == '':
                                #             break

                                #         try:
                                #             choix = int(choix)
                                #             if 1 <= choix <= len(results):
                                #                 port_info = results[choix - 1]
                                #                 service, version = port_info[2], port_info[3]

                                #                 # Create a Vulners API client
                                #                 vulners_api = vulners.VulnersApi('WUOF8FTNOSGZZ1PMG7YRL8ZB7QZZ4LXVXU29I0EJOF2VOEP08Q628T3ZLHCX6PNA')

                                #                 query = f"{service} {version}"
                                #                 cve_results = vulners_api.find_all(query)

                                #                 found_cves = False

                                #                 # Loop through the CVE results and extract the CVE lists
                                #                 cve_lists = []
                                #                 for result in cve_results:
                                #                     if "id" in result:
                                #                         cve_lists.append(tuple(result['cvelist']))

                                #                 # Remove duplicates and empty tuples
                                #                 cve_lists = list(set(cve_lists))
                                #                 cve_lists = [list(line) for line in cve_lists if line]
                                #                 if cve_lists:
                                #                     table = tabulate(cve_lists, headers=[f'CVE associated with {query}'], tablefmt='grid')
                                #                     print(table)
                                #                     if cve_lists:
                                #                         cve_lists = list(set(item for sublist in cve_lists for item in sublist))
                                #                         with open("cve.txt", "w") as f:
                                #                             for cve_id in cve_lists:
                                #                                 f.write(f"{cve_id}\n")
                                                        

    
                                #                     while True:
                                #                         ExploitCve()
                                #                         subOption = input(">>> Enter your choice\n>>> ")
                                #                         if subOption == '1':
                                                            
                                #                             with open("cve.txt", "r") as f:
                                #                                 cve_ids = [line.strip() for line in f.readlines()]

                                #                             for cve_id in cve_ids:
                                #                                 # git clone https://gitlab.com/exploit-database/exploitdb.git
                                #                                 result = subprocess.run(["exploitdb/searchsploit", "--cve", cve_id], capture_output=True, text=True)
                                #                                 output_lines = result.stdout.split('\n')
                                #                                 output_lines2 = result.stdout
                                #                                 if output_lines[0] == 'Exploits: No Results':
                                #                                     print(f"No exploits found for {cve_id}.")
                                #                                 else:
                                #                                     print(f"Exploits found for {cve_id}:")
                                #                                     print(output_lines2)
                                #                                     #https://kalinull.medium.com/how-to-add-a-module-to-metasploit-from-exploit-db-d389c2a33f6d
                                #                         elif subOption == '2':
                                #                             Menu()
                                #                             break
                                #                         else:
                                #                             print("Invalid choice.")
                                
                
                                #                 else:
                                #                     print(f"No vulnerabilities found for '{query}'.")
                                #             else:
                                #                 print("Invalid choice.")
                                #         except ValueError:
                                #             print("Invalid choice.")
                                # elif choice == '2':
                                #     Menu()
                                # else:
                                #     print("Invalid choice.")
                        else:
                            print("No open ports found.")
                            break
                    subOption = 'a'
                elif subOption == 'z':
                    break
                else:
                    print("Invalid choice.")
        elif choice == '2':
            domain = str(input(">>> Enter target domain name\n>>> "))
            URL = "http://"+domain
            
            HTML_TEMPLATE = f"""
            <!doctype html>
            <html>
            <head>
                <meta charset="UTF-8" />
                <title>Pentest report - {domain}</title>
                <script src="https://cdn.tailwindcss.com"> </script>
                <style>
                body {{
                    background-color: #fff;
                }}
                h1, h2, h3 {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                }}
                .section {{
                    background-color:  #f0f0f1;
                    border-radius: 5px;
                    padding: 20px;
                    margin-bottom: 30px;
                    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.1);
                }}
                .container {{
                    max-width: 800px;
                    
                }}
                .summary {{
                    background-color: #e5f3ff;
                    border-radius: 5px;
                    padding: 20px;
                    margin-bottom: 20px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }}

                .summary h3 {{
                    font-size: 1.5rem;
                    font-weight: 600;
                    margin-bottom: 1rem;
                }}

                .summary ul {{
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }}

                .summary li {{
                    margin-bottom: 0.5rem;
                }}

                .summary a {{
                    display: flex;
                    align-items: center;
                    text-decoration: none;
                    transition: colors 0.2s ease-in-out;
                }}

                .summary a:hover {{
                    color: #556ee6;
                }}

                .summary a span {{
                    display: inline-block;
                    width: 2rem;
                    font-size: 1.25rem;
                    font-weight: 600;
                    margin-right: 0.5rem;
                }}
                h1, h2, h3 {{
                    color: #3182ce;
                }}
                h1 {{
                    font-size: 3rem;
                    line-height: 1.1;
                    font-weight: 700;
                    margin-bottom: 0.5rem;
                }}
                h2 {{
                    font-size: 2rem;
                    line-height: 1.2;
                    font-weight: 700;
                    margin-bottom: 0.5rem;
                }}
                h3 {{
                    font-size: 1.5rem;
                    line-height: 1.3;
                    font-weight: 600;
                    margin-bottom: 0.5rem;
                }}
                p {{
                    font-size: 1rem;
                    line-height: 1.5;
                }}
                </style>
            </head>
            <body>
                <div class="container">
                <div class="summary">
                    
                    <br>
                    <h1 class="font-display text-center text-5xl font-bold tracking-tighter sm:text-7xl text-blue-600">Pentest report - {domain}</h1>
                    <br>
                    <br>
                    <h3 class="mb-3 text-xl font-semibold text-blue-600">Summary</h3>
                    <ul class="space-y-2">
                    <li>
                        <a href="#overview" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">I.</span> Overview
                        </a>
                    </li>
                    <li>
                        <a href="#dns-request" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">II.</span> DNS Request
                        </a>
                    </li>
                    <li>
                        <a href="#http-https-certificate" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">III.</span> Data about HTTP/HTTPS certificate
                        </a>
                    </li>
                    <li>
                        <a href="#nmap-scan" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">IV.</span> NMAP scan
                        </a>
                    </li>
                    <li>
                        <a href="#nikto-scan" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">V.</span> Nikto scan
                        </a>
                    </li>
                    <li>
                        <a href="#potential-vulnerabilities" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">VI.</span> Potential vulnerabilities
                        </a>
                    </li>
                    <li>
                        <a href="#exploit-find" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">VII.</span> Exploit find
                        </a>
                    </li>
                    <li>
                        <a href="#recommendations" class="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">
                        <span class="mr-2">VIII.</span> Recommendations
                        </a>
                    </li>
                    </ul>
                </div>
                <div class="section">
                    <h3 id="overview" class="mb-3 text-xl">I. Overview</h3>
                    <p>This report presents the results of a vulnerability assessment conducted on <strong>{domain}</strong> using Python modules. The objective of this assessment is to provide a brief overview of the security posture of the target and identify potential vulnerabilities that could be exploited by attackers.</p>
                    <p>The main objective of the assessment was to identify vulnerabilities that could be used by attackers to compromise the confidentiality, integrity, or availability of the target. Python modules are used to automate the scanning process and identify potential vulnerabilities in the target.</p>
                    <p><strong>Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M')}</p>
                    <p><strong>Target :</strong> {domain}</p>
                    <p><strong>Type:</strong> vulnerability scanner</p>
                </div>
                <div class="section">
                    <h3 id="dns-request" class="mb-3 text-xl">II. DNS Request</h3>
                    <p>{DNSLookUp(domain, True)}</p>
                </div>
                <div class="section">
                    <h3 id="http-https-certificate" class="mb-3 text-xl">III. Data about HTTP/HTTPS certificate</h3>
                    <p>{getCertificate(domain, True)}</p>
                </div>
                <div class="section">
                    <h3 id="nmap-scan" class="mb-3 text-xl">IV. NMAP scan</h3>
                    <p>{NmapDiscover(domain,True)}</p>
                </div>
                <div class="section">
                    <h3 id="nikto-scan" class="mb-3 text-xl">V. Nikto scan</h3>
                    <p>{check_server(URL, True)}</p>
                </div>
                <div class="section">
                    <h3 id="potential-vulnerabilities" class="mb-3 text-xl">VI. Potential vulnerabilities</h3>
                    <p>{CveAllPort(domain,True)}</p>
                </div>
                <div class="section">
                    <h3 id="exploit-find" class="mb-3 text-xl">VII. Exploit find</h3>
                    <p>{ExploitCVE(True)}</p>
                </div>
                <div class="section">
                    <h3 id="recommendations" class="mb-3 text-xl">VIII. Recommendations</h3>
                    <div class="flex">
                    <div class="w-1/2">
                        <p>Keep your systems up-to-date with the latest security patches and updates for all software and services running on your domain or IP address. Vulnerabilities are often discovered and patched by vendors, so it's important to stay current with updates to minimize risk.</p>
                    </div>
                    <div class="w-1/2">
                        <p>We also recommend reviewing the list of links provided in this report, which point to known exploits and vulnerabilities affecting various services. These links can provide additional information and guidance on how to mitigate these specific security risks for your domain or IP address.</p>
                    </div>
                    </div>
                    <p>By following these recommendations and staying vigilant against emerging security threats, you can help protect your systems and data from unauthorized access and exploitation.</p>
                </div>
                </div>
            </body>
            </html>


            """

            # Generate the PDF
            HTML(string=HTML_TEMPLATE).write_pdf("vulnerability_report.pdf")

            
            print(f">>> {Fore.GREEN}[+] Searchsploit done !{Style.RESET_ALL}")
            
            PATH = str(os.getcwd() + '\\result.pdf')
            print(f">>> {Fore.CYAN}PDF créé avec succès à {PATH}{Style.RESET_ALL}")
            print(f">>> {Fore.GREEN}[+] Terminé à {datetime.now()}{Style.RESET_ALL}")
            break
        elif choice == '3':
            ExploitMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    search_cve()
        elif choice == '4':
            PasswordAnalyze()
            subOption = input(Fore.BLUE + ">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    while True:
                        password = input(Fore.BLUE + ">>> Enter the password\n>>> ")
                        if not password:
                            break
                        result = password_strength(password)
                        print(result)
                        while True:
                            print(Fore.BLUE + ">>> Do you want to analyze another password? (y/n)")
                            answer = input(Fore.BLUE + ">>> ").lower()
                            if answer == 'y':
                                break
                            elif answer == 'n':
                                Menu()
                            else:
                                print(Fore.RED + ">>> Invalid response, please enter 'y' or 'n'.")
                elif subOption == 'b':
                    file_path = input(Fore.BLUE + '>>> Enter the Keepass file path:\n>>> ')
                    password = getpass.getpass(Fore.BLUE + '>>> Enter the Keepass file password:\n>>> ')

                    weak_passwords = analyze_password_from_keepass_file(file_path, password)
                    if weak_passwords:
                        Menu()
                    else:
                        print(Fore.GREEN + 'No weak passwords detected.')
                        Menu()
        elif choice == '5':
            OsintMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    osint()
                    break
        elif choice == '6':
            Dashboard()
            subOption = str(input(">>> Choose an option\n>>> "))
            while subOption != 'z':
                if subOption == 'a':
                    target = str(input(">>> Enter the target\n>>> "))

                    start_dash_app()
                    print("Dashboard started.")
                    input("Press Enter to return to the main menu...")
                    Menu()
                    break
        elif choice == '7':
            InfoMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    target = str(input(">>> Enter the target\n>>> "))
                    print(whois_query(target))
                    
                elif subOption == 'b':
                    domain = str(input(">>> Enter the domain\n>>> "))
                    print(DNSLookUp(domain))
                    
                elif subOption == 'c':
                    domain = str(input(">>> Enter the domain\n>>> "))
                    print(getCertificate(domain))
                    
                InfoMenu()
                subOption = input(">>> Choose an option\n>>> ")
        elif choice == '99':
            print(Fore.RED + "Goodbye!")
            sys.exit()
        else:
            print(Fore.RED + "Invalid choice, please try again.")

# L'appel à la fonction Menu pour démarrer le programme
Menu()

