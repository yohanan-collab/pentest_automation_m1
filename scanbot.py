import os
import colorama
from colorama import Fore, Back, Style
import subprocess
from tabulate import tabulate
import nmap
from datetime import datetime
import re
import vulners
from password_analysis import password_strength
from password_analysis import analyze_password_from_keepass_file
from password_analysis import analyse_password

def banner():
    print("   _____                  ____        __  \n" +
          "  / ___/_________ _____  / __ )____  / /_\n" +
          "  \\__ \\/ ___/ __ `/ __ \\/ __  / __ \\/ __/\n" +
          " ___/ / /__/ /_/ / / / / /_/ / /_/ / /_\n" +
          "/____/\\___/\\__,_/_/ /_/_____/\\____/\\__/\n" +
          "                                         \n")


def extract_version(version_string):
    # Utilisation d'une expression régulière pour extraire la version principale (par exemple, "7.6")
    version_match = re.search(r'(\d+\.\d+)', version_string)
    if version_match:
        return version_match.group(1)
    else:
        return ''

def Nmap(ip):
    nm = nmap.PortScanner()
    nm.scan(ip, '21-443')

    results = []

    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                state = nm[host][proto][port]['state']
                if state == 'open':
                    service = nm[host][proto][port]['name']
                    version = extract_version(nm[host][proto][port]['version']) if 'version' in nm[host][proto][port] else ''
                    results.append([host, port, service, version])

    return results

def nouveau_scan():
    target = input("Entrez la cible : ")
    results = Nmap(target)

    if results:
        headers = ["ID", "Port", "Service", "Version"]
        formatted_results = [[i+1, result[1], result[2], result[3]] for i, result in enumerate(results)]
        print(tabulate(formatted_results, headers=headers, tablefmt="grid"))
        search_cve(results)
    else:
        print("No open ports found.")

def search_cve(results):
    if not results:
        print("Aucun scan n'a été effectué.")
        return
    try:
        while True:
            print(Fore.WHITE + "1. CVE associés")
            print(Fore.WHITE + "2. Retour au menu")
            choice = input("Entrez votre choix : ")
            choice = int(choice)
            if choice == 1 :
                while True:
                    print(Fore.WHITE + ">>> Entrer l'ID du Service (1 par exemple) : ")
                    print(Fore.WHITE + ">>> Retour au menu (Appuyer sur entrer)")
                    choix = input("Entrez votre choix : ")
                    choix = int(choix) 
                    if 1 <= choix <= len(results):
                        port_info = results[choix - 1]
                        service, version = port_info[2], port_info[3]

                        # Create a Vulners API client
                        # vulners_api = vulners.VulnersApi('84H4FQ2JHSCZB3DB0EWTDDJQEVOJUK2WFAF74T3HMQ8DU51APYFHLKWJYKYE4KMA')
                        vulners_api = vulners.VulnersApi('CYJ25C4XL7OP1HOUEGCOJVAKAV988NKAHPX6V63H7HSLAJODJT5TT6FIQ7RHR0DD')

                        query = f"{service} {version}"
                        cve_results = vulners_api.find_all(query)

                        found_cves = False

                        # Loop through the CVE results and extract the CVE lists
                        cve_lists = []
                        for result in cve_results:
                            if "id" in result:
                                cve_lists.append(tuple(result['cvelist']))

                        # Remove duplicates and empty tuples
                        cve_lists = list(set(cve_lists))
                        cve_lists = [list(line) for line in cve_lists if line]

                        # cve_lists = [tuple(Fore.RED + cve if isinstance(cve, str) else cve for cve in line) for line in cve_lists]

                        # Create a table from the list of dictionaries
                        if cve_lists:
                            table = tabulate(cve_lists, headers=[f'CVE associé à {query}'], tablefmt='grid')
                            print(table)
                        else:
                            print(f"No vulnerabilities found for '{query}'.")
                    elif choice == '':
                        Menu()
                    else:
                        print("Choix invalide.")
            elif choice == 2:
                Menu()
    except ValueError:
        print("Choix invalide.")


def derniers_scans():
    print("Fonctionnalité à venir")

def osint():
    print("Fonctionnalité à venir")
def Menu():
    while True:
        print(Fore.WHITE + "1. Nouveau scan")
        print(Fore.WHITE + "2. Derniers scans effectués")
        print(Fore.WHITE + "3. Search CVE")
        print(Fore.WHITE + "4. Analyse de password")
        print(Fore.WHITE + "5. Osint")
        print(Fore.WHITE + "6. Quitter")
        choice = input("Entrez votre choix : ")
        if choice == '1':
            nouveau_scan()
        elif choice == '2':
            derniers_scans()
        elif choice == '3':
            search_cve()
        elif choice == '4':
            analyse_password()
        elif choice == '5':
            osint()
        elif choice == '6':
            break
        else:
            print(Fore.RED + "Choix invalide, veux-essayer encore?")
colorama.init()
banner()
Menu()
