import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
from datetime import datetime
import os
import subprocess
import sys
import colorama
import getpass
from colorama import Fore, Style
from tabulate import tabulate
from options.certificat import getCertificate
from options.dnslookup import DNSLookUp
from options.gobuster import GobusterEnum
from options.new_scan import CveAllPort, CvePerPort, NmapDiscover, SearchExploit
from options.osint import osint
from options.basics_attacks import attack_port_hydra, exploit_vulnerability
from options.password_analysis import analyze_password_from_keepass_file, password_strength
from menu import CveMenu, ExploitCveMenu, ExploitMenu, InfoMenu, OsintMenu, PasswordAnalyze, TargetMenu, displayMenu, displayHeader
from options.report_pdf import check_server
from options.search_cve import search_cve
from weasyprint import HTML

from options.whoisrecon import whois_query

colorama.init()
displayHeader()


def Menu():
    while True:
        displayMenu()
        choice = input(">>> Choose an option\n>>> ")
        if choice == '1':
            TargetMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    while True:
                        target = input(Fore.CYAN + ">>> Enter the target\n>>> ")
                        results = NmapDiscover(target)
                        
                        if results:
                            headers = ["Port", "Service", "Version"]
                            formatted_results = [[index, result[0], result[1], result[2]] for index, result in enumerate(results)]
                            print(tabulate(formatted_results, headers=headers, tablefmt="grid"))
                            

                            while True:
                                CveMenu()
                                choice = input(">>> Enter your choice\n>>> ")
                                if choice == '1':
                                    CvePerPort(target)
                                    print('\n************************************\n')
                                    SearchExploit()
                                    while True:
                                        ExploitCveMenu()
                                        subOption = input(">>> Enter your choice\n>>> ")
                                        if subOption == '1':
                                            attack_port_hydra(target)
                                        elif subOption == '2':
                                            path = input(">>> Enter path file (metasploit)\n>>> ")
                                            exploit_vulnerability(path, target)
                                        elif subOption == '3':
                                            break
                                        else:
                                            print("Invalid choice.")
                                elif choice == '2':
                                    CveAllPort(target)
                                    print('\n************************************\n')
                                    SearchExploit()
                                    while True:
                                        ExploitCveMenu()
                                        subOption = input(">>> Enter your choice\n>>> ")
                                        if subOption == '1':
                                            attack_port_hydra(target)
                                        elif subOption == '2':
                                            path = input(">>> Enter path file (metasploit)\n>>> ")
                                            exploit_vulnerability(path, target)
                                        elif subOption == '3':
                                            break
                                        else:
                                            print("Invalid choice.")
                                    
                                    Menu()
                                else:  
                                    Menu()
                                
                        else:
                            print("No open ports found.")
                            break
                    subOption = 'a'
                elif subOption == 'z':
                    break
                else:
                    return
        elif choice == '2':
            domain = str(input(">>> Enter target domain name\n>>> "))
            URL = "http://"+domain
            
            HTML_TEMPLATE = f"""
            <!doctype html>
            <html>
            <head>
                <meta charset="UTF-8" />
                <title>Pentest report - {domain}</title>
                <script src="https://cdn.tailwindcss.com"> </script>
                <style>
                body {{
                font-family: 'Open Sans', sans-serif;
                font-size: 16px;
                line-height: 1.5;
                color: #333;
                margin: 0;
                padding: 0;
                }}

                header {{
                border-bottom: 1px solid #ddd;
                }}

                h1, h2 {{
                margin: 0;
                padding: 0;
                }}

                h1 {{
                font-size: 3rem;
                text-align: center;
                padding-top: 1rem;
                padding-bottom: 1rem;
                }}

                h2 {{
                font-size: 2rem;
                margin-bottom: 1rem;
                }}

                .section {{
                margin-bottom: 2rem;
                padding: 1rem;
                border-bottom: 1px solid #ddd;
                }}

                .section:last-child {{
                border-bottom: none;
                }}

                p {{
                margin: 0;
                padding: 0;
                }}

                ul {{
                list-style: none;
                padding-left: 0;
                margin: 0;
                }}

                li {{
                margin-bottom: 0.5rem;
                }}

                a {{
                color: #007bff;
                text-decoration: none;
                }}

                a:hover {{
                text-decoration: underline;
                }}

                table {{
                width: 100%;
                border-collapse: collapse;
                }}

                th, td {{
                border: 1px solid #ddd;
                padding: 0.5rem;
                text-align: left;
                }}

                th {{
                background-color: #f2f2f2;
                font-weight: bold;
                }}
            </style>

            </head>
            <body>
                
            <header class="bg-gray-100 py-4">
            <h1 class="text-3xl text-center">Pentest report - {domain}</h1>
            </header>
            <main class="container mx-auto p-4">
                <h2 class="text-2xl font-bold mb-4">Summary</h2>
                <ul>
                <li><a href="#overview">I. Overview</a></li>
                <li><a href="#dns-request">II. DNS Request</a></li>
                <li><a href="#certificate-data">III. Data about HTTP/HTTPS certificate</a></li>
                <li><a href="#subdirectories">IV. Subdirectories Found</a></li>
                <li><a href="#nmap-scan">V. NMAP scan</a></li>
                <li><a href="#nikto-scan">VI. Nikto scan</a></li>
                <li><a href="#vulnerabilities">VII. Potential vulnerabilities</a></li>
                <li><a href="#exploit-find">VIII. Exploit find</a></li>
                <li><a href="#recommendations">IX. Recommendations</a></li>
                </ul>
                <section class="section" id="overview">
                <h2 class="text-2xl font-bold mb-4">I. Overview</h2>
                <p>This report presents the results of a vulnerability assessment conducted on <strong>{domain}</strong> using Python modules. The objective of this assessment is to provide a brief overview of the security posture of the target and identify potential vulnerabilities that could be exploited by attackers.</p>
                <p>The main objective of the assessment was to identify vulnerabilities that could be used by attackers to compromise the confidentiality, integrity, or availability of the target. Python modules are used to automate the scanning process and identify potential vulnerabilities in the target.</p>
                <p><strong>Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M')}</p>
                <p><strong>Target :</strong> {domain}</p>
                <p><strong>Type:</strong> vulnerability scanner</p>
                </section>

                <section class="section">
                <h2 id="dns-request" class="text-2xl font-bold mb-4"">II. DNS Request</h2>
                <p>{DNSLookUp(domain, True)}</p>
                </section>
                <section class="section">
                    <h2 id="http-https-certificate" class="text-2xl font-bold mb-4"">III. Data about HTTP/HTTPS certificate</h2>
                    <p>{getCertificate(domain, True)}</p>
                </section>
                <section class="section">
                    <h2 id="subdirectories" class="text-2xl font-bold mb-4"">IV. Subdirectories Found</h2>
                    <p>{GobusterEnum(f'http://{domain}', True)}</p>
                </section>
                <section class="section">
                    <h2 id="nmap-scan" class="text-2xl font-bold mb-4"">V. NMAP scan</h2>
                    <p>{NmapDiscover(domain,True)}</p>
                </section>
                <section class="section">
                    <h2 id="nikto-scan" class="text-2xl font-bold mb-4"">VI. Nikto scan</h2>
                    <p>{check_server(URL, True)}</p>
                </section>
                <section class="section" id="vulnerabilities">
                <h2 class="text-2xl font-bold mb-4">VII. Potential vulnerabilities</h2>
                {CveAllPort(domain,True)}
                </section>
                <section class="section">
                    <h2 id="exploit-find" class="text-2xl font-bold mb-4"">VIII. Exploit find</h2>
                    <p>{SearchExploit(True)}</p>
                </section>
                <section class="section">
                    <h2 id="recommendations" class="text-2xl font-bold mb-4"">IX. Recommendations</h2>
                    <div class="flex">
                    <div class="w-1/2">
                        <p>Keep your systems up-to-date with the latest security patches and updates for all software and services running on your domain or IP address. Vulnerabilities are often discovered and patched by vendors, so it's important to stay current with updates to minimize risk.</p>
                    </div>
                    <div class="w-1/2">
                        <p>We also recommend reviewing the list of links provided in this report, which point to known exploits and vulnerabilities affecting various services. These links can provide additional information and guidance on how to mitigate these specific security risks for your domain or IP address.</p>
                    </div>
                    </div>
                    <p>By following these recommendations and staying vigilant against emerging security threats, you can help protect your systems and data from unauthorized access and exploitation.</p>
                </section>
                <!-- Add other sections here -->
            </main>

            </body>
            </html>


            """

            # Generate the PDF
            HTML(string=HTML_TEMPLATE).write_pdf(f"report/rapport_pentest_{domain}.pdf")

            
            print(f">>> {Fore.GREEN}[+] Searchsploit done !{Style.RESET_ALL}")
            
            PATH = str(os.getcwd() + f'/report/rapport_pentest_{domain}.pdf')
            print(f">>> {Fore.CYAN}PDF créé avec succès à {PATH}{Style.RESET_ALL}")
            print(f">>> {Fore.GREEN}[+] Terminé à {datetime.now()}{Style.RESET_ALL}")
            break
        elif choice == '3':
            ExploitMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    search_cve()
                    ExploitMenu()
                    subOption = input(">>> Choose an option\n>>> ")
        elif choice == '4':
            PasswordAnalyze()
            subOption = input(Fore.BLUE + ">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    
                    password = input(Fore.BLUE + ">>> Enter the password\n>>> ")
                    if not password:
                        break
                    result = password_strength(password)
                    print(result)
                    PasswordAnalyze()
                    subOption = input(Fore.BLUE + ">>> Choose an option\n>>> ")
                elif subOption == 'b':
                    file_path = input(Fore.BLUE + '>>> Enter the Keepass file path:\n>>> ')
                    password = getpass.getpass(Fore.BLUE + '>>> Enter the Keepass file password:\n>>> ')

                    analyze_password_from_keepass_file(file_path, password)
                    PasswordAnalyze()
                    subOption = input(Fore.BLUE + ">>> Choose an option\n>>> ")
                    
        elif choice == '5':
            OsintMenu()
            osint()
        elif choice == '6':
            InfoMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    target = str(input(">>> Enter the target\n>>> "))
                    print(whois_query(target))
                    
                elif subOption == 'b':
                    domain = str(input(">>> Enter the domain\n>>> "))
                    print(DNSLookUp(domain))
                    
                elif subOption == 'c':
                    domain = str(input(">>> Enter the domain\n>>> "))
                    print(getCertificate(domain))
                elif subOption == 'd':
                    target = str(input(">>> Enter the target\n>>> "))
                    GobusterEnum(f"http://{target}")
                InfoMenu()
                subOption = input(">>> Choose an option\n>>> ")
        elif choice == '99':
            print(Fore.RED + "Goodbye!")
            sys.exit()
        else:
            print(Fore.RED + "Invalid choice, please try again.")

# L'appel à la fonction Menu pour démarrer le programme
Menu()
