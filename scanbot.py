import subprocess
import sys
import colorama
import getpass
from colorama import Fore, Back, Style
from tabulate import tabulate
from options.certificat import getCertificate
from options.dnslookup import DNSLookUp
from options.new_scan import Nmap
from options.osint import osint
from options.password_analysis import password_strength
from options.password_analysis import analyze_password_from_keepass_file
from menu import CveMenu, Dashboard, ExploitCve, ExploitMenu, InfoMenu, OsintMenu, PasswordAnalyze, ServiceId, TargetMenu, displayMenu
from menu import displayHeader
from options.report_pdf import report_pdf
from options.search_cve import search_cve

import vulners
import sys

from options.whoisrecon import whois_query
sys.path.append('/workspace/pentest_automation_m1/options/')
colorama.init()
displayHeader()

def start_dash_app():
    dash_process = subprocess.Popen(["python", "options/generate_dashboard.py"])
    dash_process.wait()
    
def Menu():
    while True:
        displayMenu()
        choice = input(">>> Choose an option\n>>> ")
        if choice == '1':
            TargetMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    while True:
                        target = input(Fore.CYAN + ">>> Enter the target\n>>> ")
                        results = Nmap(target)

                        if results:
                            headers = ["ID", "Port", "Service", "Version"]
                            formatted_results = [[i+1, result[1], result[2], result[3]] for i, result in enumerate(results)]
                            print(tabulate(formatted_results, headers=headers, tablefmt="grid"))

                            while True:
                                CveMenu()
                                choice = input(">>> Enter your choice\n>>> ")

                                if choice == '1':
                                    while True:
                                        ServiceId()
                                        choix = input(">>> Enter your choice\n>>> ")

                                        if choix == '':
                                            break

                                        try:
                                            choix = int(choix)
                                            if 1 <= choix <= len(results):
                                                port_info = results[choix - 1]
                                                service, version = port_info[2], port_info[3]

                                                # Create a Vulners API client
                                                vulners_api = vulners.VulnersApi('CYJ25C4XL7OP1HOUEGCOJVAKAV988NKAHPX6V63H7HSLAJODJT5TT6FIQ7RHR0DD')

                                                query = f"{service} {version}"
                                                cve_results = vulners_api.find_all(query)

                                                found_cves = False

                                                # Loop through the CVE results and extract the CVE lists
                                                cve_lists = []
                                                for result in cve_results:
                                                    if "id" in result:
                                                        cve_lists.append(tuple(result['cvelist']))

                                                # Remove duplicates and empty tuples
                                                cve_lists = list(set(cve_lists))
                                                cve_lists = [list(line) for line in cve_lists if line]
                                                print(cve_lists)
                                                # Create a table from the list of dictionaries
                                                if cve_lists:
                                                    table = tabulate(cve_lists, headers=[f'CVE associated with {query}'], tablefmt='grid')
                                                    print(table)
                                                    if cve_lists:
                                                        with open("cve.txt", "w") as f:
                                                            
                                                            f.write(f"{cve_lists}\n")
                                                        
                                                    while True:
                                                        ExploitCve()
                                                        choix = input(">>> Enter your choice\n>>> ")
                                                        if choix == '1':
                                                            print('')
                                                else:
                                                    print(f"No vulnerabilities found for '{query}'.")
                                            else:
                                                print("Invalid choice.")
                                        except ValueError:
                                            print("Invalid choice.")
                                elif choice == '2':
                                    Menu()
                                else:
                                    print("Invalid choice.")
                        else:
                            print("No open ports found.")
                            break
                    subOption = 'a'
                elif subOption == 'z':
                    break
                else:
                    print("Invalid choice.")
        elif choice == '2':
            report_pdf()
        elif choice == '3':
            ExploitMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    search_cve()
        elif choice == '4':
            PasswordAnalyze()
            subOption = input(Fore.BLUE + ">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    while True:
                        password = input(Fore.BLUE + ">>> Enter the password\n>>> ")
                        if not password:
                            break
                        result = password_strength(password)
                        print(result)
                        while True:
                            print(Fore.BLUE + ">>> Do you want to analyze another password? (y/n)")
                            answer = input(Fore.BLUE + ">>> ").lower()
                            if answer == 'y':
                                break
                            elif answer == 'n':
                                Menu()
                            else:
                                print(Fore.RED + ">>> Invalid response, please enter 'y' or 'n'.")
                elif subOption == 'b':
                    file_path = input(Fore.BLUE + '>>> Enter the Keepass file path:\n>>> ')
                    password = getpass.getpass(Fore.BLUE + '>>> Enter the Keepass file password:\n>>> ')

                    weak_passwords = analyze_password_from_keepass_file(file_path, password)
                    if weak_passwords:
                        Menu()
                    else:
                        print(Fore.GREEN + 'No weak passwords detected.')
                        Menu()
        elif choice == '5':
            OsintMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    osint()
                    break
        elif choice == '6':
            Dashboard()
            subOption = str(input(">>> Choose an option\n>>> "))
            while subOption != 'z':
                if subOption == 'a':
                    target = str(input(">>> Enter the target\n>>> "))

                    start_dash_app()
                    print("Dashboard started.")
                    input("Press Enter to return to the main menu...")
                    Menu()
                    break
        elif choice == '7':
            InfoMenu()
            subOption = input(">>> Choose an option\n>>> ")
            while subOption != 'z':
                if subOption == 'a':
                    target = str(input(">>> Enter the target\n>>> "))
                    print(whois_query(target))
                    
                elif subOption == 'b':
                    domain = str(input(">>> Enter the domain\n>>> "))
                    print(DNSLookUp(domain))
                    
                elif subOption == 'c':
                    domain = str(input(">>> Enter the domain\n>>> "))
                    print(getCertificate(domain))
                    
                InfoMenu()
                subOption = input(">>> Choose an option\n>>> ")
        elif choice == '99':
            print(Fore.RED + "Goodbye!")
            sys.exit()
        else:
            print(Fore.RED + "Invalid choice, please try again.")

# L'appel à la fonction Menu pour démarrer le programme
Menu()

